//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModbusServiceHost.DynamicCacheServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DynamicCacheServiceReference.IDynamicCacheManagerService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDynamicCacheManagerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDynamicCacheManagerService/ProcessCommandResult")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ModbusServiceLibrary.CommandResult.ConnectToRtuResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ModbusServiceLibrary.CommandResult.ConnectToRtuFailedResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ModbusServiceLibrary.CommandResult.ReadSingleDiscreteSignalResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ModbusServiceLibrary.CommandResult.ReadSingleDiscreteSignalFailedResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ModbusServiceLibrary.CommandResult.ReadSingleAnalogSignalResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ModbusServiceLibrary.CommandResult.ReadSingleAnalogSignalFailedResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ModbusServiceLibrary.CommandResult.WriteDiscreteSignalCommandResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ModbusServiceLibrary.CommandResult.WriteAnalogSignalCommandResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ModbusServiceLibrary.CommandResult.CommandProcessorNotFoundResult))]
        void ProcessCommandResult(ModbusServiceLibrary.CommandResult.CommandResultBase commandResult);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDynamicCacheManagerService/ProcessCommandResult")]
        System.Threading.Tasks.Task ProcessCommandResultAsync(ModbusServiceLibrary.CommandResult.CommandResultBase commandResult);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDynamicCacheManagerServiceChannel : ModbusServiceHost.DynamicCacheServiceReference.IDynamicCacheManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DynamicCacheManagerServiceClient : System.ServiceModel.ClientBase<ModbusServiceHost.DynamicCacheServiceReference.IDynamicCacheManagerService>, ModbusServiceHost.DynamicCacheServiceReference.IDynamicCacheManagerService {
        
        public DynamicCacheManagerServiceClient() {
        }
        
        public DynamicCacheManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DynamicCacheManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DynamicCacheManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DynamicCacheManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ProcessCommandResult(ModbusServiceLibrary.CommandResult.CommandResultBase commandResult) {
            base.Channel.ProcessCommandResult(commandResult);
        }
        
        public System.Threading.Tasks.Task ProcessCommandResultAsync(ModbusServiceLibrary.CommandResult.CommandResultBase commandResult) {
            return base.Channel.ProcessCommandResultAsync(commandResult);
        }
    }
}
