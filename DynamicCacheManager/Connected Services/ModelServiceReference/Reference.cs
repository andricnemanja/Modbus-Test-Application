//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DynamicCacheManager.ModelServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flag", Namespace="http://schemas.datacontract.org/2004/07/ModelWcfServiceLibrary.Model.Flags")]
    [System.SerializableAttribute()]
    public partial class Flag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CommandAllowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReadAllowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DynamicCacheManager.ModelServiceReference.FlagType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UserAssignableField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CommandAllowed {
            get {
                return this.CommandAllowedField;
            }
            set {
                if ((this.CommandAllowedField.Equals(value) != true)) {
                    this.CommandAllowedField = value;
                    this.RaisePropertyChanged("CommandAllowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ReadAllowed {
            get {
                return this.ReadAllowedField;
            }
            set {
                if ((this.ReadAllowedField.Equals(value) != true)) {
                    this.ReadAllowedField = value;
                    this.RaisePropertyChanged("ReadAllowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DynamicCacheManager.ModelServiceReference.FlagType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UserAssignable {
            get {
                return this.UserAssignableField;
            }
            set {
                if ((this.UserAssignableField.Equals(value) != true)) {
                    this.UserAssignableField = value;
                    this.RaisePropertyChanged("UserAssignable");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlagType", Namespace="http://schemas.datacontract.org/2004/07/ModelWcfServiceLibrary.Model.Flags")]
    public enum FlagType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Info = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warn = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fatal = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ModelServiceReference.IModelService")]
    public interface IModelService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetAllRTUs", ReplyAction="http://tempuri.org/IModelService/GetAllRTUsResponse")]
        ModbusServiceLibrary.ModelServiceReference.RTU[] GetAllRTUs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetAllRTUs", ReplyAction="http://tempuri.org/IModelService/GetAllRTUsResponse")]
        System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.RTU[]> GetAllRTUsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetRTU", ReplyAction="http://tempuri.org/IModelService/GetRTUResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ModbusServiceLibrary.ModelServiceReference.ModelServiceException), Action="http://tempuri.org/IModelService/GetRTUModelServiceExceptionFault", Name="ModelServiceException", Namespace="http://schemas.datacontract.org/2004/07/ModelWcfServiceLibrary")]
        ModbusServiceLibrary.ModelServiceReference.RTU GetRTU(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetRTU", ReplyAction="http://tempuri.org/IModelService/GetRTUResponse")]
        System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.RTU> GetRTUAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetDiscreteSignalsForRtu", ReplyAction="http://tempuri.org/IModelService/GetDiscreteSignalsForRtuResponse")]
        ModbusServiceLibrary.ModelServiceReference.DiscreteSignal[] GetDiscreteSignalsForRtu(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetDiscreteSignalsForRtu", ReplyAction="http://tempuri.org/IModelService/GetDiscreteSignalsForRtuResponse")]
        System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.DiscreteSignal[]> GetDiscreteSignalsForRtuAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetAnalogSignalsForRtu", ReplyAction="http://tempuri.org/IModelService/GetAnalogSignalsForRtuResponse")]
        ModbusServiceLibrary.ModelServiceReference.AnalogSignal[] GetAnalogSignalsForRtu(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetAnalogSignalsForRtu", ReplyAction="http://tempuri.org/IModelService/GetAnalogSignalsForRtuResponse")]
        System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.AnalogSignal[]> GetAnalogSignalsForRtuAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetRTUsEssentialData", ReplyAction="http://tempuri.org/IModelService/GetRTUsEssentialDataResponse")]
        ModbusServiceLibrary.ModelServiceReference.RTUData[] GetRTUsEssentialData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetRTUsEssentialData", ReplyAction="http://tempuri.org/IModelService/GetRTUsEssentialDataResponse")]
        System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.RTUData[]> GetRTUsEssentialDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetAnalogSignalMappings", ReplyAction="http://tempuri.org/IModelService/GetAnalogSignalMappingsResponse")]
        ModbusServiceLibrary.ModelServiceReference.AnalogSignalMapping[] GetAnalogSignalMappings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetAnalogSignalMappings", ReplyAction="http://tempuri.org/IModelService/GetAnalogSignalMappingsResponse")]
        System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.AnalogSignalMapping[]> GetAnalogSignalMappingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetDiscreteSignalMappings", ReplyAction="http://tempuri.org/IModelService/GetDiscreteSignalMappingsResponse")]
        ModbusServiceLibrary.ModelServiceReference.DiscreteSignalMapping[] GetDiscreteSignalMappings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetDiscreteSignalMappings", ReplyAction="http://tempuri.org/IModelService/GetDiscreteSignalMappingsResponse")]
        System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.DiscreteSignalMapping[]> GetDiscreteSignalMappingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetDiscreteSignalPossibleStates", ReplyAction="http://tempuri.org/IModelService/GetDiscreteSignalPossibleStatesResponse")]
        string[] GetDiscreteSignalPossibleStates(int rtuId, int signalAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetDiscreteSignalPossibleStates", ReplyAction="http://tempuri.org/IModelService/GetDiscreteSignalPossibleStatesResponse")]
        System.Threading.Tasks.Task<string[]> GetDiscreteSignalPossibleStatesAsync(int rtuId, int signalAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetAllFlags", ReplyAction="http://tempuri.org/IModelService/GetAllFlagsResponse")]
        DynamicCacheManager.ModelServiceReference.Flag[] GetAllFlags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetAllFlags", ReplyAction="http://tempuri.org/IModelService/GetAllFlagsResponse")]
        System.Threading.Tasks.Task<DynamicCacheManager.ModelServiceReference.Flag[]> GetAllFlagsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModelServiceChannel : DynamicCacheManager.ModelServiceReference.IModelService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModelServiceClient : System.ServiceModel.ClientBase<DynamicCacheManager.ModelServiceReference.IModelService>, DynamicCacheManager.ModelServiceReference.IModelService {
        
        public ModelServiceClient() {
        }
        
        public ModelServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ModelServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ModbusServiceLibrary.ModelServiceReference.RTU[] GetAllRTUs() {
            return base.Channel.GetAllRTUs();
        }
        
        public System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.RTU[]> GetAllRTUsAsync() {
            return base.Channel.GetAllRTUsAsync();
        }
        
        public ModbusServiceLibrary.ModelServiceReference.RTU GetRTU(int id) {
            return base.Channel.GetRTU(id);
        }
        
        public System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.RTU> GetRTUAsync(int id) {
            return base.Channel.GetRTUAsync(id);
        }
        
        public ModbusServiceLibrary.ModelServiceReference.DiscreteSignal[] GetDiscreteSignalsForRtu(int id) {
            return base.Channel.GetDiscreteSignalsForRtu(id);
        }
        
        public System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.DiscreteSignal[]> GetDiscreteSignalsForRtuAsync(int id) {
            return base.Channel.GetDiscreteSignalsForRtuAsync(id);
        }
        
        public ModbusServiceLibrary.ModelServiceReference.AnalogSignal[] GetAnalogSignalsForRtu(int id) {
            return base.Channel.GetAnalogSignalsForRtu(id);
        }
        
        public System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.AnalogSignal[]> GetAnalogSignalsForRtuAsync(int id) {
            return base.Channel.GetAnalogSignalsForRtuAsync(id);
        }
        
        public ModbusServiceLibrary.ModelServiceReference.RTUData[] GetRTUsEssentialData() {
            return base.Channel.GetRTUsEssentialData();
        }
        
        public System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.RTUData[]> GetRTUsEssentialDataAsync() {
            return base.Channel.GetRTUsEssentialDataAsync();
        }
        
        public ModbusServiceLibrary.ModelServiceReference.AnalogSignalMapping[] GetAnalogSignalMappings() {
            return base.Channel.GetAnalogSignalMappings();
        }
        
        public System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.AnalogSignalMapping[]> GetAnalogSignalMappingsAsync() {
            return base.Channel.GetAnalogSignalMappingsAsync();
        }
        
        public ModbusServiceLibrary.ModelServiceReference.DiscreteSignalMapping[] GetDiscreteSignalMappings() {
            return base.Channel.GetDiscreteSignalMappings();
        }
        
        public System.Threading.Tasks.Task<ModbusServiceLibrary.ModelServiceReference.DiscreteSignalMapping[]> GetDiscreteSignalMappingsAsync() {
            return base.Channel.GetDiscreteSignalMappingsAsync();
        }
        
        public string[] GetDiscreteSignalPossibleStates(int rtuId, int signalAddress) {
            return base.Channel.GetDiscreteSignalPossibleStates(rtuId, signalAddress);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDiscreteSignalPossibleStatesAsync(int rtuId, int signalAddress) {
            return base.Channel.GetDiscreteSignalPossibleStatesAsync(rtuId, signalAddress);
        }
        
        public DynamicCacheManager.ModelServiceReference.Flag[] GetAllFlags() {
            return base.Channel.GetAllFlags();
        }
        
        public System.Threading.Tasks.Task<DynamicCacheManager.ModelServiceReference.Flag[]> GetAllFlagsAsync() {
            return base.Channel.GetAllFlagsAsync();
        }
    }
}
