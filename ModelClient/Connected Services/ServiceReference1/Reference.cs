//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModelClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IModelService")]
    public interface IModelService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetStaticData", ReplyAction="http://tempuri.org/IModelService/GetStaticDataResponse")]
        System.Collections.Generic.List<SharedModel.Model.RTU.RTU> GetStaticData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetStaticData", ReplyAction="http://tempuri.org/IModelService/GetStaticDataResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<SharedModel.Model.RTU.RTU>> GetStaticDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetRTU", ReplyAction="http://tempuri.org/IModelService/GetRTUResponse")]
        SharedModel.Model.RTU.RTU GetRTU(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetRTU", ReplyAction="http://tempuri.org/IModelService/GetRTUResponse")]
        System.Threading.Tasks.Task<SharedModel.Model.RTU.RTU> GetRTUAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetDiscreteSignalsForRtu", ReplyAction="http://tempuri.org/IModelService/GetDiscreteSignalsForRtuResponse")]
        System.Collections.Generic.List<SharedModel.Model.Signals.DiscreteSignal> GetDiscreteSignalsForRtu(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetDiscreteSignalsForRtu", ReplyAction="http://tempuri.org/IModelService/GetDiscreteSignalsForRtuResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<SharedModel.Model.Signals.DiscreteSignal>> GetDiscreteSignalsForRtuAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetAnalogSignalsForRtu", ReplyAction="http://tempuri.org/IModelService/GetAnalogSignalsForRtuResponse")]
        System.Collections.Generic.List<SharedModel.Model.Signals.AnalogSignal> GetAnalogSignalsForRtu(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelService/GetAnalogSignalsForRtu", ReplyAction="http://tempuri.org/IModelService/GetAnalogSignalsForRtuResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<SharedModel.Model.Signals.AnalogSignal>> GetAnalogSignalsForRtuAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModelServiceChannel : ModelClient.ServiceReference1.IModelService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModelServiceClient : System.ServiceModel.ClientBase<ModelClient.ServiceReference1.IModelService>, ModelClient.ServiceReference1.IModelService {
        
        public ModelServiceClient() {
        }
        
        public ModelServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ModelServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<SharedModel.Model.RTU.RTU> GetStaticData() {
            return base.Channel.GetStaticData();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<SharedModel.Model.RTU.RTU>> GetStaticDataAsync() {
            return base.Channel.GetStaticDataAsync();
        }
        
        public SharedModel.Model.RTU.RTU GetRTU(int id) {
            return base.Channel.GetRTU(id);
        }
        
        public System.Threading.Tasks.Task<SharedModel.Model.RTU.RTU> GetRTUAsync(int id) {
            return base.Channel.GetRTUAsync(id);
        }
        
        public System.Collections.Generic.List<SharedModel.Model.Signals.DiscreteSignal> GetDiscreteSignalsForRtu(int id) {
            return base.Channel.GetDiscreteSignalsForRtu(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<SharedModel.Model.Signals.DiscreteSignal>> GetDiscreteSignalsForRtuAsync(int id) {
            return base.Channel.GetDiscreteSignalsForRtuAsync(id);
        }
        
        public System.Collections.Generic.List<SharedModel.Model.Signals.AnalogSignal> GetAnalogSignalsForRtu(int id) {
            return base.Channel.GetAnalogSignalsForRtu(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<SharedModel.Model.Signals.AnalogSignal>> GetAnalogSignalsForRtuAsync(int id) {
            return base.Channel.GetAnalogSignalsForRtuAsync(id);
        }
    }
}
