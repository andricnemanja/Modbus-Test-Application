<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Redis.OM</name>
    </assembly>
    <members>
        <member name="T:Redis.OM.Aggregation.AggregationEnumerator`1">
            <summary>
            the enumerator for an aggregation.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationEnumerator`1.#ctor(System.Linq.Expressions.Expression,Redis.OM.Contracts.IRedisConnection,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationEnumerator`1"/> class.
            </summary>
            <param name="exp">the expression to enumerate.</param>
            <param name="connection">the connection.</param>
            <param name="chunkSize">the size of a chunk.</param>
            <param name="useCursor">whether to use a cursor or not.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationEnumerator`1.Current">
            <summary>
            Gets the current item.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationEnumerator`1.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationEnumerator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationEnumerator`1.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationEnumerator`1.MoveNextAsync">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationEnumerator`1.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.AggregateSortBy">
            <summary>
            Sort by predicate for an aggregation.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.AggregateSortBy.#ctor(System.String,Redis.OM.Searching.SortDirection,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.AggregateSortBy"/> class.
            </summary>
            <param name="property">property to sort by.</param>
            <param name="direction">direction to sort by.</param>
            <param name="max">maximum number of records to pull.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.AggregateSortBy.Property">
            <summary>
            Gets or sets property to sort by.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.AggregateSortBy.Direction">
            <summary>
            Gets or sets direction to sort.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.AggregateSortBy.Max">
            <summary>
            Gets or sets maximum number of elements.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.AggregateSortBy.NumArgs">
            <summary>
            gets the number of arguments of this predicate.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.AggregateSortBy.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.Apply">
            <summary>
            A predicate building a function to apply to items in the aggregation pipeline.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.Apply.#ctor(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.Apply"/> class.
            </summary>
            <param name="expression">the expression.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.Apply.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.Apply.Expression">
            <summary>
            gets the expression.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.Apply.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions">
            <summary>
            Functions to use within apply expressions. Minimal implementations provided for sanity checks, but this should
            be used primarily within expressions.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.Exists(System.Object)">
            <summary>
            checks if the field exists on the object in redis.
            </summary>
            <param name="field">the field to check.</param>
            <returns>whether the field exists or not.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.FormatTimestamp(System.Int64)">
            <summary>
            Formats the unix timestamp into a string timestamp.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <returns>a formatted timestamp of %FT%TZ.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.FormatTimestamp(System.Int64,System.String)">
            <summary>
            Formats the unix timestamp into a string timestamp.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <param name="format">The format to use <see href="http://strftime.org/">strftime</see>.</param>
            <returns>a formatted timestamp of %FT%TZ.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.ParseTime(System.String)">
            <summary>
            parses a unix timestamp from the provided string.
            </summary>
            <param name="timestamp">the timestamp in %FT%TZ format.</param>
            <returns>the unix timestamp.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.ParseTime(System.String,System.String)">
            <summary>
            Formats the unix timestamp into a string timestamp.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <param name="format">The format to use <see href="http://strftime.org/">strftime</see>.</param>
            <returns>a formatted timestamp of %FT%TZ.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.Day(System.Int64)">
            <summary>
            Rounds the timestamp to midnight of the current day.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <returns>the timestamp rounded to midnight.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.Hour(System.Int64)">
            <summary>
            Rounds the timestamp to the beginning of the current hour.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <returns>the timestamp rounded to the current hour.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.Minute(System.Int64)">
            <summary>
            Rounds the timestamp to the beginning of the current minute.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <returns>the timestamp rounded to the current minute.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.Month(System.Int64)">
            <summary>
            Rounds the timestamp to the beginning of the current month.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <returns>The timestamp rounded to the beginning of the current month.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.DayOfWeek(System.Int64)">
            <summary>
            get's the day of the week from the timestamp.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <returns>the day of the week Sunday=0.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.DayOfMonth(System.Int64)">
            <summary>
            Gets the day of the month from the timestamp.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <returns>The day of the month.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.DayOfYear(System.Int64)">
            <summary>
            Gets the day of the year from the timestamp.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <returns>The day of the year.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.Year(System.Int64)">
            <summary>
            Gets the year from the timestamp.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <returns>the year.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.MonthOfYear(System.Int64)">
            <summary>
            Gets the month from the timestamp.
            </summary>
            <param name="timestamp">the timestamp.</param>
            <returns>the month.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.GeoDistance(Redis.OM.Modeling.GeoLoc,Redis.OM.Modeling.GeoLoc)">
            <summary>
            calculates the distance between two points in meters.
            </summary>
            <param name="loc1">first location.</param>
            <param name="loc2">second location.</param>
            <returns>the distance in meters.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.GeoDistance(Redis.OM.Modeling.GeoLoc,System.String)">
            <summary>
            calculates the distance between two points in meters.
            </summary>
            <param name="loc1">first location.</param>
            <param name="loc2Str">second location.</param>
            <returns>the distance in meters.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.GeoDistance(Redis.OM.Modeling.GeoLoc,System.Double,System.Double)">
            <summary>
            calculates the distance between two points in meters.
            </summary>
            <param name="loc1">first location.</param>
            <param name="lon2">Second location's longitude.</param>
            <param name="lat2">Second location's latitude.</param>
            <returns>the distance in meters.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.GeoDistance(System.String,Redis.OM.Modeling.GeoLoc)">
            <summary>
            calculates the distance between two points in meters.
            </summary>
            <param name="loc1Str">First location.</param>
            <param name="loc2">Second location.</param>
            <returns>the distance in meters.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.GeoDistance(System.String,System.String)">
            <summary>
            calculates the distance between two points in meters.
            </summary>
            <param name="loc1Str">First location.</param>
            <param name="loc2Str">Second location.</param>
            <returns>the distance in meters.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.GeoDistance(System.String,System.Double,System.Double)">
            <summary>
            calculates the distance between two points in meters.
            </summary>
            <param name="loc1Str">First location.</param>
            <param name="lon2">Second location longitude.</param>
            <param name="lat2">Second location latitude.</param>
            <returns>the distance in meters.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.GeoDistance(System.Double,System.Double,Redis.OM.Modeling.GeoLoc)">
            <summary>
            Calculates the distance between two points in meters.
            </summary>
            <param name="lon1">first location's longitude.</param>
            <param name="lat1">first location's latitude.</param>
            <param name="loc2">second location.</param>
            <returns>the distance in meters.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.GeoDistance(System.Double,System.Double,System.String)">
            <summary>
            Calculates the distance between two points in meters.
            </summary>
            <param name="lon1">first location's longitude.</param>
            <param name="lat1">first location's latitude.</param>
            <param name="loc2Str">second location.</param>
            <returns>distance in meters.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ApplyFunctions.GeoDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance between two points. Minimal implementation taken from Stackoverflow. https://stackoverflow.com/a/51839058/7299345.
            </summary>
            <param name="longitude">first location longitude.</param>
            <param name="latitude">first location latitude.</param>
            <param name="otherLongitude">second location longitude.</param>
            <param name="otherLatitude">second location's latitude.</param>
            <returns>distance in meters.</returns>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.FilterOperand">
            <summary>
            A representation of a filter operand.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.FilterOperand.#ctor(System.String,Redis.OM.Aggregation.AggregationPredicates.FilterOperandType)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.FilterOperand"/> class.
            </summary>
            <param name="text">the text.</param>
            <param name="operandType">the operand type.</param>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.FilterOperand.ToString">
            <summary>
            Sends the operand to a string.
            </summary>
            <returns>String representation of the operand.</returns>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.FilterOperandType">
            <summary>
            The type of operand you are looking at when parsing expressions.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.FilterOperandType.Identifier">
            <summary>
            The item is an identifier.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.FilterOperandType.Numeric">
            <summary>
            The item is a literal numeric.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.FilterOperandType.String">
            <summary>
            The item is a string literal.
            </summary>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.FilterPredicate">
            <summary>
            predicate for filtering results from an aggregation.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.FilterPredicate.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.FilterPredicate"/> class.
            </summary>
            <param name="expression">The expression to use for filtering.</param>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.FilterPredicate.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.FirstValueReduction">
            <summary>
            Get's the first value of a group matching the expression.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.FirstValueReduction.#ctor(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.FirstValueReduction"/> class.
            </summary>
            <param name="exp">The expression.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.FirstValueReduction.ResultName">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.FirstValueReduction.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.GroupBy">
            <summary>
            A predicate indicating that you want to group like objects together.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.GroupBy.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.GroupBy"/> class.
            </summary>
            <param name="properties">the properties to group.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.GroupBy.Properties">
            <summary>
            Gets or sets the properties to group.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.GroupBy.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.IAggregationPredicate">
            <summary>
            A predicate in an aggregation pipeline.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.IAggregationPredicate.Serialize">
            <summary>
            Serializes the predicate.
            </summary>
            <returns>An array of string arguments for an aggregation.</returns>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.LimitPredicate">
            <summary>
            A predicate for limiting results of an aggregation.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.LimitPredicate.Offset">
            <summary>
            Gets or sets the offset to use to step into the results.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.LimitPredicate.Count">
            <summary>
            Gets or sets the number of items to return.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.LimitPredicate.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.Load">
            <summary>
            Represents a Load aggregation predicate.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.Load.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.Load"/> class.
            </summary>
            <param name="properties">The properties to load.</param>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.Load.Serialize">
            <inheritdoc />
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.LoadAll">
            <summary>
            Represents an aggregation predicate to load all properties of a model.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.LoadAll.Serialize">
            <inheritdoc />
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.MultiSort">
            <summary>
            Allows a grouping together of multiple sortby predicates.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.MultiSort.InsertPredicate(Redis.OM.Aggregation.AggregationPredicates.AggregateSortBy)">
            <summary>
            Inserts a predicate into the multi-sort.
            </summary>
            <param name="sb">The sortby predicate.</param>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.MultiSort.Serialize">
            <inheritdoc />
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.QueryPredicate">
            <summary>
            A query predicate for an aggregation.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.QueryPredicate.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.QueryPredicate"/> class.
            </summary>
            <param name="exp">the expression.</param>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.QueryPredicate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.QueryPredicate"/> class.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.QueryPredicate.Serialize">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.QueryPredicate.ValidateAndPushOperand(System.Linq.Expressions.Expression,System.Collections.Generic.Stack{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.QueryPredicate.SplitBinaryExpression(System.Linq.Expressions.BinaryExpression,System.Collections.Generic.Stack{System.String})">
            <summary>
            Splits the binary expression, and pushes it's predicates onto the stack.
            </summary>
            <param name="expression">the expression to split.</param>
            <param name="stack">the stack.</param>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction">
            <summary>
            the name of a reduction function.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.COUNT">
            <summary>
            count.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.COUNT_DISTINCT">
            <summary>
            distinct count.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.COUNT_DISTINCTISH">
            <summary>
            An approximate count of distinct occurrences of a field.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.SUM">
            <summary>
            The sum.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.MIN">
            <summary>
            Min.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.MAX">
            <summary>
            Max.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.AVG">
            <summary>
            Average.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.STDDEV">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.QUANTILE">
            <summary>
            Quantile.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.TOLIST">
            <summary>
            Sends distinct elements to a list.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.FIRST_VALUE">
            <summary>
            retrieves the first value matching the pattern.
            </summary>
        </member>
        <member name="F:Redis.OM.Aggregation.AggregationPredicates.ReduceFunction.RANDOM_SAMPLE">
            <summary>
            Gets a random sample.
            </summary>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.Reduction">
            <summary>
            A reduction.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.Reduction.#ctor(Redis.OM.Aggregation.AggregationPredicates.ReduceFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.Reduction"/> class.
            </summary>
            <param name="function">The function to reduce to.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.Reduction.ResultName">
            <summary>
            Gets the alias of the result name when the reduction completes.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.Reduction.Function">
            <summary>
            Gets The function to use for reduction.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.Reduction.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.SingleArgumentReduction">
            <summary>
            A reduction with one argument.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.SingleArgumentReduction.#ctor(Redis.OM.Aggregation.AggregationPredicates.ReduceFunction,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.SingleArgumentReduction"/> class.
            </summary>
            <param name="function">The reduction function.</param>
            <param name="arg">The name of the argument.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.SingleArgumentReduction.ResultName">
            <summary>
            Gets the name of the result.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.SingleArgumentReduction.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.TwoArgumentReduction">
            <summary>
            A reduction with two arguments.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.TwoArgumentReduction.#ctor(Redis.OM.Aggregation.AggregationPredicates.ReduceFunction,System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.TwoArgumentReduction"/> class.
            </summary>
            <param name="func">The reduction function.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.TwoArgumentReduction.ResultName">
            <summary>
            Gets the name of the result.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.TwoArgumentReduction.Serialize">
            <summary>
            Sends the reduction to an array of strings for redis.
            </summary>
            <returns>an array of strings.</returns>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationPredicates.ZeroArgumentReduction">
            <summary>
            A reduction that takes no arguments.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ZeroArgumentReduction.#ctor(Redis.OM.Aggregation.AggregationPredicates.ReduceFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationPredicates.ZeroArgumentReduction"/> class.
            </summary>
            <param name="function">the reduction function.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationPredicates.ZeroArgumentReduction.ResultName">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationPredicates.ZeroArgumentReduction.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationResult`1">
            <summary>
            A result of an aggregation.
            </summary>
            <typeparam name="T">This is the type of the record shell, which should only be used when building
            the pipeline.</typeparam>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationResult`1.#ctor(Redis.OM.RedisReply)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationResult`1"/> class.
            </summary>
            <param name="res">The redis reply to use when building the aggregation result.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationResult`1.RecordShell">
            <summary>
            Gets a Shell of a Record stored on the database, only appropriate to use
            inside of aggregation pipelines, no real data will be stored in here once
            the AggregationResult is Hydrated.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationResult`1.Aggregations">
            <summary>
            Gets the computed aggregations. When materialized, this is a completed set of aggregations.
            When building the pipeline, you can use fields computed further up the pipeline.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationResult`1.Item(System.String)">
            <summary>
            Accesses an aggregation directly.
            </summary>
            <param name="key">the aggregation alias.</param>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationResult`1.Hydrate">
            <summary>
            Hydrates the record from the available properties. Basically, this will place all the properties found in "Aggregations"
            into an instance of your model, and in the special case where you've called a LoadAll on a JSON model, this should parse the entire record.
            </summary>
            <returns>An instance of the base class hydrated as much as possible by the Results of the aggregation.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationResult`1.FromRedisResult(Redis.OM.RedisReply)">
            <summary>
            Initializes a set of aggregations from an aggregation result.
            </summary>
            <param name="res">the result to enumerate.</param>
            <returns>A set of Aggregation Results.</returns>
        </member>
        <member name="T:Redis.OM.Aggregation.AggregationResult">
            <summary>
            Non-generic aggregation result.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationResult.#ctor(Redis.OM.RedisReply)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.AggregationResult"/> class.
            </summary>
            <param name="res">the RedisReply to build the result from.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationResult.Aggregations">
            <summary>
            Gets the aggregations.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.AggregationResult.Item(System.String)">
            <summary>
            Indexes directly to a particular aggregation.
            </summary>
            <param name="key">The key to look up.</param>
        </member>
        <member name="M:Redis.OM.Aggregation.AggregationResult.FromRedisResult(Redis.OM.RedisReply)">
            <summary>
            Initialize an enumerable of Aggregation Results from a Redis Reply.
            </summary>
            <param name="res">the reply to initialize the results from.</param>
            <returns>an enumerable of results.</returns>
        </member>
        <member name="T:Redis.OM.Aggregation.GroupedAggregationSet`1">
            <summary>
            An aggregation set that represents a grouped set of items.
            </summary>
            <typeparam name="T">The type being aggregated.</typeparam>
        </member>
        <member name="M:Redis.OM.Aggregation.GroupedAggregationSet`1.#ctor(Redis.OM.Aggregation.RedisAggregationSet{`0},System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.GroupedAggregationSet`1"/> class.
            </summary>
            <param name="source">The previous aggregation set.</param>
            <param name="expression">the expression.</param>
        </member>
        <member name="T:Redis.OM.Aggregation.IAggregationResult">
            <summary>
            An aggregation result.
            </summary>
        </member>
        <member name="T:Redis.OM.Aggregation.RedisAggregation">
            <summary>
            An aggregation pipeline.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.RedisAggregation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.RedisAggregation"/> class.
            </summary>
            <param name="indexName">The index being queried.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.RedisAggregation.IndexName">
            <summary>
            Gets the index to run the aggregation on.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.RedisAggregation.Query">
            <summary>
            Gets or sets the query predicate.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.RedisAggregation.Queries">
            <summary>
            Gets or sets the query predicate.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.RedisAggregation.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
        </member>
        <member name="P:Redis.OM.Aggregation.RedisAggregation.Predicates">
            <summary>
            Gets the predicates to use for the aggregation.
            </summary>
        </member>
        <member name="M:Redis.OM.Aggregation.RedisAggregation.Serialize">
            <summary>
            serializes the aggregation into an array of arguments for redis.
            </summary>
            <returns>The serialized arguments.</returns>
        </member>
        <member name="T:Redis.OM.Aggregation.RedisAggregationSet`1">
            <summary>
            A collection that you can use to run aggregations in redis.
            </summary>
            <typeparam name="T">The type of the record shell in the aggregation result.</typeparam>
        </member>
        <member name="M:Redis.OM.Aggregation.RedisAggregationSet`1.#ctor(Redis.OM.Contracts.IRedisConnection,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.RedisAggregationSet`1"/> class.
            </summary>
            <param name="connection">the connection to use.</param>
            <param name="useCursor">whether or not to use a cursor.</param>
            <param name="chunkSize">Size of the chunks to use during pagination, larger chunks return larger payloads but with fewer round trips.</param>
        </member>
        <member name="M:Redis.OM.Aggregation.RedisAggregationSet`1.#ctor(Redis.OM.Searching.RedisQueryProvider,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.RedisAggregationSet`1"/> class.
            </summary>
            <param name="provider">the query provider.</param>
            <param name="useCursor">whether or not to use the cursor.</param>
            <param name="chunkSize">Size of the chunks to use during pagination, larger chunks return larger payloads but with fewer round trips.</param>
        </member>
        <member name="M:Redis.OM.Aggregation.RedisAggregationSet`1.#ctor(Redis.OM.Aggregation.RedisAggregationSet{`0},System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Aggregation.RedisAggregationSet`1"/> class.
            </summary>
            <param name="source">the old set.</param>
            <param name="exp">the new expression.</param>
        </member>
        <member name="P:Redis.OM.Aggregation.RedisAggregationSet`1.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Redis.OM.Aggregation.RedisAggregationSet`1.Expression">
            <inheritdoc/>
        </member>
        <member name="P:Redis.OM.Aggregation.RedisAggregationSet`1.Provider">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.RedisAggregationSet`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.RedisAggregationSet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.RedisAggregationSet`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Aggregation.RedisAggregationSet`1.ToListAsync">
            <summary>
            Materializes the set as a list asynchronously.
            </summary>
            <returns>a task that will resolve when the list is enumerated.</returns>
        </member>
        <member name="M:Redis.OM.Aggregation.RedisAggregationSet`1.ToArrayAsync">
            <summary>
            Materializes the set as an array asynchronously.
            </summary>
            <returns>a task that will resolve when the array is enumerated.</returns>
        </member>
        <member name="T:Redis.OM.Common.BooleanExpression">
            <summary>
            A boolean expression.
            </summary>
        </member>
        <member name="M:Redis.OM.Common.BooleanExpression.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Common.BooleanExpression"/> class.
            </summary>
            <param name="expression">the expression.</param>
        </member>
        <member name="P:Redis.OM.Common.BooleanExpression.Expression">
            <summary>
            Gets or sets the Lambda expression.
            </summary>
        </member>
        <member name="M:Redis.OM.Common.BooleanExpression.ValidateAndPushOperand(System.Linq.Expressions.Expression,System.Collections.Generic.Stack{System.String})">
            <summary>
            Validates an operand and pushes it onto the stack.
            </summary>
            <param name="expression">the expression.</param>
            <param name="stack">the stack.</param>
        </member>
        <member name="M:Redis.OM.Common.BooleanExpression.SplitBinaryExpression(System.Linq.Expressions.BinaryExpression,System.Collections.Generic.Stack{System.String})">
            <summary>
            Splits the binary expression into a usable query.
            </summary>
            <param name="expression">the expression.</param>
            <param name="stack">the operand stack.</param>
        </member>
        <member name="M:Redis.OM.Common.BooleanExpression.SplitExpression">
            <summary>
            splits the expression recursively.
            </summary>
            <returns>a stack of predicate strings.</returns>
        </member>
        <member name="T:Redis.OM.Common.ExpressionParserUtilities">
            <summary>
            utilities for parsing expressions.
            </summary>
        </member>
        <member name="F:Redis.OM.Common.ExpressionParserUtilities.TagEscapeChars">
            <summary>
            Characters to escape when serializing a tag expression.
            </summary>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.GetOperandString(System.Linq.Expressions.Expression)">
            <summary>
            Get's the operand string.
            </summary>
            <param name="exp">the expression to parse.</param>
            <returns>The operand string.</returns>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.GetOperandString(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Gets the operand string.
            </summary>
            <param name="exp">the expression to parse.</param>
            <returns>The operand string.</returns>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.GetOperandStringForQueryArgs(System.Linq.Expressions.Expression,System.Boolean,System.Boolean)">
            <summary>
            Gets the operand string from a search.
            </summary>
            <param name="exp">expression.</param>
            <param name="treatEnumsAsInt">Treat enum as an integer.</param>
            <param name="negate">Whether or not to negate the result.</param>
            <returns>the operand string.</returns>
            <exception cref="T:System.ArgumentException">thrown if expression is un-parseable.</exception>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.GetValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Pull the value out of a member, typically used for a closure.
            </summary>
            <param name="memberInfo">The member info.</param>
            <param name="forObject">the object.</param>
            <returns>the value.</returns>
            <exception cref="T:System.NotImplementedException">thrown if member info is not a field or property.</exception>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.IsBinaryExpression(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether it's a binary expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Whether or not it's a binary expression.</returns>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.ParseBinaryExpression(System.Linq.Expressions.BinaryExpression,System.Boolean)">
            <summary>
            Splits the expression apart into a query.
            </summary>
            <param name="rootBinaryExpression">The root expression.</param>
            <param name="filterFormat">Whether or not to use the filter format.</param>
            <returns>a query.</returns>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.TranslateMethodExpressions(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Translates the method expression.
            </summary>
            <param name="exp">the expression.</param>
            <returns>The expression translated.</returns>
            <exception cref="T:System.ArgumentException">thrown if the method isn't recognized.</exception>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.TranslateGeoFilter(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Translates a method expression into a geofilter.
            </summary>
            <param name="exp">the expression.</param>
            <returns>the geo filter.</returns>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.GetSearchFieldNameFromMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the search field name from member expression. Will climb back up to the parent node and build the alias.
            Which will be all the names in the path to the expression seperated by an underscore. e.g. Address_City.
            </summary>
            <param name="member">The member expression to pull the serach field name from.</param>
            <returns>The alias to search for.</returns>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.GetMemberChain(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the chain of members down to the currently accessed member.
            </summary>
            <param name="memberExpression">The member expression being accessed.</param>
            <returns>The chain of members down to the currently accessed member, e.g. if a Person's
            Address.City was being accessed a stack with Address at the top and City at the bottom would be returned.</returns>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.DetermineSearchAttribute(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the Search Field type for the member.
            </summary>
            <param name="memberExpression">the member expression.</param>
            <returns>the <see cref="T:Redis.OM.Modeling.SearchFieldAttribute"/>.</returns>
        </member>
        <member name="M:Redis.OM.Common.ExpressionParserUtilities.EscapeTagField(System.String)">
            <summary>
            Escapes a tag field string.
            </summary>
            <param name="text">the text toe escape.</param>
            <returns>The Escaped Text.</returns>
        </member>
        <member name="T:Redis.OM.Common.ExpressionTranslator">
            <summary>
            Translates expressions into usable queries and aggregations.
            </summary>
        </member>
        <member name="M:Redis.OM.Common.ExpressionTranslator.BuildAggregationFromExpression(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Build's an aggregation from an expression.
            </summary>
            <param name="expression">The expression to translate.</param>
            <param name="type">The type indexed by the expression.</param>
            <returns>An aggregation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if enclosing type is not indexed.</exception>
        </member>
        <member name="M:Redis.OM.Common.ExpressionTranslator.BuildQueryFromExpression(System.Linq.Expressions.Expression,System.Type,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Build's a query from the given expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="type">The root type.</param>
            <param name="mainBooleanExpression">The primary boolean expression to build the filter from.</param>
            <param name="rootType">The root type for the expression.</param>
            <returns>A Redis query.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if type is missing indexing.</exception>
        </member>
        <member name="M:Redis.OM.Common.ExpressionTranslator.DetermineIndexFieldsType(System.Reflection.MemberInfo)">
            <summary>
            Get's the index field type for the given member info.
            </summary>
            <param name="member">member to get the type for.</param>
            <returns>The index field type.</returns>
        </member>
        <member name="M:Redis.OM.Common.ExpressionTranslator.TranslateBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Translates a binary expression.
            </summary>
            <param name="binExpression">The Binary Expression.</param>
            <returns>The query string formatted from the binary expression.</returns>
            <exception cref="T:System.ArgumentException">Thrown if expression is not parsable because of the arguments passed into it.</exception>
        </member>
        <member name="M:Redis.OM.Common.ExpressionTranslator.GetFieldName(System.Linq.Expressions.Expression)">
            <summary>
            Get's the field name referred to by the expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The field name.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the expression is of an unexpected type.</exception>
        </member>
        <member name="M:Redis.OM.Common.ExpressionTranslator.GetFieldNamesForExpression(System.Linq.Expressions.Expression)">
            <summary>
            Get's the field names for a group by expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The field names.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the expression is of an unrecognized type.</exception>
        </member>
        <member name="M:Redis.OM.Common.ExpressionTranslator.TranslateAndPushGroupBy(System.Collections.Generic.Stack{Redis.OM.Aggregation.AggregationPredicates.IAggregationPredicate},System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Translate and push a group by expression.
            </summary>
            <param name="predicates">Preexisting predicates for the aggregation.</param>
            <param name="expression">The expression to parse.</param>
        </member>
        <member name="T:Redis.OM.Contracts.IRedisConnection">
            <summary>
            A connection to Redis.
            </summary>
        </member>
        <member name="M:Redis.OM.Contracts.IRedisConnection.Execute(System.String,System.String[])">
            <summary>
            Executes a command.
            </summary>
            <param name="command">The command name.</param>
            <param name="args">The arguments.</param>
            <returns>A redis Reply.</returns>
        </member>
        <member name="M:Redis.OM.Contracts.IRedisConnection.ExecuteAsync(System.String,System.String[])">
            <summary>
            Executes a command.
            </summary>
            <param name="command">The command name.</param>
            <param name="args">The arguments.</param>
            <returns>A redis Reply.</returns>
        </member>
        <member name="M:Redis.OM.Contracts.IRedisConnection.ExecuteInTransactionAsync(System.Tuple{System.String,System.String[]}[])">
            <summary>
            Executes the contained commands within the context of a transaction.
            </summary>
            <param name="commandArgsTuples">each tuple represents a command and
                it's arguments to execute inside a transaction.</param>
            <returns>A redis Reply.</returns>
        </member>
        <member name="M:Redis.OM.Contracts.IRedisConnection.ExecuteInTransaction(System.Tuple{System.String,System.String[]}[])">
            <summary>
            Executes the contained commands within the context of a transaction.
            </summary>
            <param name="commandArgsTuples">each tuple represents a command and
                it's arguments to execute inside a transaction.</param>
            <returns>A redis Reply.</returns>
        </member>
        <member name="T:Redis.OM.Contracts.IRedisConnectionProvider">
            <summary>
            Provides a connection to redis.
            </summary>
        </member>
        <member name="P:Redis.OM.Contracts.IRedisConnectionProvider.Connection">
            <summary>
            Gets a command level interface to redis.
            </summary>
        </member>
        <member name="M:Redis.OM.Contracts.IRedisConnectionProvider.AggregationSet``1(System.Int32)">
            <summary>
            Gets an aggregation set for redis.
            </summary>
            <typeparam name="T">The indexed type to run aggregations on.</typeparam>
            <param name="chunkSize">Size of chunks to use during pagination, larger chunks = larger payloads returned but fewer round trips.</param>
            <returns>the aggregation set.</returns>
        </member>
        <member name="M:Redis.OM.Contracts.IRedisConnectionProvider.RedisCollection``1(System.Int32)">
            <summary>
            Gets a redis collection.
            </summary>
            <typeparam name="T">The type the collection will be retrieving.</typeparam>
            <param name="chunkSize">Size of chunks to use during pagination, larger chunks = larger payloads returned but fewer round trips.</param>
            <returns>A RedisCollection.</returns>
        </member>
        <member name="M:Redis.OM.Contracts.IRedisConnectionProvider.RedisCollection``1(System.Boolean,System.Int32)">
            <summary>
            Gets a redis collection.
            </summary>
            <typeparam name="T">The type the collection will be retrieving.</typeparam>
            <param name="saveState">Whether or not the RedisCollection should maintain the state of documents it enumerates.</param>
            <param name="chunkSize">Size of chunks to use during pagination, larger chunks = larger payloads returned but fewer round trips.</param>
            <returns>A RedisCollection.</returns>
        </member>
        <member name="T:Redis.OM.Contracts.IRedisHydrateable">
            <summary>
            An object that can be hydrated too and from a Redis Hash.
            </summary>
        </member>
        <member name="M:Redis.OM.Contracts.IRedisHydrateable.Hydrate(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Hydrates the object.
            </summary>
            <param name="dict">The dictionary to hydrate from.</param>
        </member>
        <member name="M:Redis.OM.Contracts.IRedisHydrateable.BuildHashSet">
            <summary>
            Converts object to dictionary for Redis.
            </summary>
            <returns>A dictionary for Redis.</returns>
        </member>
        <member name="T:Redis.OM.StringExtension">
            <summary>
            String Search Extensions.
            </summary>
        </member>
        <member name="M:Redis.OM.StringExtension.FuzzyMatch(System.String,System.String,System.Byte)">
            <summary>
            Checks if the string Levenshtein distance between the source and term is less than the provided distance.
            </summary>
            <param name="source">Source string.</param>
            <param name="term">The string to compare the source to.</param>
            <param name="distanceThreshold">The threshold for permissible distance (must be 3 or less).</param>
            <returns>Whether the strings are within the provided Levenshtein distance of each other.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if distanceThreshold is greater than 3.</exception>
            <remarks>This is meant to be a shadow method that runs within an expression, a working implementation is
            provided here for completeness.</remarks>
        </member>
        <member name="M:Redis.OM.StringExtension.MatchStartsWith(System.String,System.String)">
            <summary>
            Checks the source string to see if any tokens within the source string start with the prefix.
            </summary>
            <param name="source">The string to check.</param>
            <param name="prefix">The prefix to look for within the string.</param>
            <returns>Whether any token within the source string starts with the prefix.</returns>
            <remarks>This is meant to be a shadow method that runs within an expression, a working implementation is
            provided here for completeness.</remarks>
        </member>
        <member name="M:Redis.OM.StringExtension.MatchEndsWith(System.String,System.String)">
            <summary>
            Checks the source string to see if any tokens within the source string ends with the suffix.
            </summary>
            <param name="source">The string to check.</param>
            <param name="suffix">The suffix to look for within the string.</param>
            <returns>Whether any token within the source string ends with the suffix.</returns>
            <remarks>This is meant to be a shadow method that runs within an expression, a working implementation is
            provided here for completeness.</remarks>
        </member>
        <member name="M:Redis.OM.StringExtension.MatchContains(System.String,System.String)">
            <summary>
            Checks the source string to see if any tokens within the source contains the infix.
            </summary>
            <param name="source">The string to check.</param>
            <param name="infix">The infix to look for within the string.</param>
            <returns>Whether any token within the source string contains the infix.</returns>
            <remarks>This is meant to be a shadow method that runs within an expression, a working implementation is
            provided here for completeness.</remarks>
        </member>
        <member name="M:Redis.OM.StringExtension.LevenshteinDistance(System.String,System.String)">
            <summary>
            Wagner-Fischer dynamic programming string distance algorithm.
            </summary>
            <param name="source">The source string to check the distance from.</param>
            <param name="term">The destination string to check the distance to.</param>
            <returns>The Levenshtein distance.</returns>
            <remarks>This is meant to be a shadow method that runs within an expression, a working implementation is
            provided here for completeness.</remarks>
        </member>
        <member name="T:Redis.OM.Modeling.GeoLoc">
            <summary>
            A structure representing a point on the globe by it's longitude and latitude.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.GeoLoc.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Modeling.GeoLoc"/> struct.
            </summary>
            <param name="longitude">The longitude.</param>
            <param name="latitude">The latitude.</param>
        </member>
        <member name="P:Redis.OM.Modeling.GeoLoc.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.GeoLoc.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.GeoLoc.Parse(System.String)">
            <summary>
            Parses a Geolocation from a string.
            </summary>
            <param name="geolocString">the string representation of a geoloc.</param>
            <returns>a geoloc parsed from the string.</returns>
            <exception cref="T:System.ArgumentException">thrown if the geoloc could not be parsed from the string.</exception>
        </member>
        <member name="M:Redis.OM.Modeling.GeoLoc.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Modeling.DateTimeJsonConverter">
            <summary>
            DateTime converter for JSON serialization.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.DateTimeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Modeling.DateTimeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Redis.OM.Modeling.DelDiff">
            <summary>
            A diff that will delete the property.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.DelDiff.Script">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Modeling.DelDiff.SerializeScriptArgs">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Modeling.DocumentAttribute">
            <summary>
            An attribute to use to decorate class level objects you wish to store in redis.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.DocumentAttribute.StorageType">
            <summary>
            Gets or sets the storage type.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.DocumentAttribute.IdGenerationStrategyName">
            <summary>
            Gets or sets the IdGenerationStrategy, will use a ULID by default.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.DocumentAttribute.Prefixes">
            <summary>
            Gets or sets the prefixes to use for the Documents.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.DocumentAttribute.IndexName">
            <summary>
            Gets or sets the name of the index, will default to className-idx.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.DocumentAttribute.Language">
            <summary>
            Gets or sets The language the documents are stored in.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.DocumentAttribute.LanguageField">
            <summary>
            Gets or sets the field in the document to check for the language in.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.DocumentAttribute.Filter">
            <summary>
            Gets or sets the filter to use for indexing documents.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.DocumentAttribute.Stopwords">
            <summary>
            Gets or sets The stopwords to use for this index. If not set, Redis will use the
            <see href="https://redis.io/docs/stack/search/reference/stopwords/#default-stop-word-list">default</see> stopwords for this index.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.DocumentAttribute.IdGenerationStrategy">
            <summary>
            Gets the IdGenerationStrategy.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.DocumentAttribute.RegisterIdGenerationStrategy(System.String,Redis.OM.IIdGenerationStrategy)">
            <summary>
            Registers an Id generation Strategy with the Object Mapper.
            </summary>
            <param name="strategyName">The name of the strategy, which you will reference when declaring a Document.</param>
            <param name="strategy">An instance of the Strategy class to be used by all documents to generate an id.</param>
        </member>
        <member name="T:Redis.OM.Modeling.DocumentAttributeExtensions">
            <summary>
            utility functions for document attribute class.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.DocumentAttributeExtensions.GetIndexName(Redis.OM.Modeling.DocumentAttribute,System.Type)">
            <summary>
            Get's the index name for the attribute and type.
            </summary>
            <param name="attr">The document attribute.</param>
            <param name="type">The type.</param>
            <returns>The index name.</returns>
        </member>
        <member name="T:Redis.OM.Modeling.GeoLocJsonConverter">
            <summary>
            Json Converter for converting <see cref="T:Redis.OM.Modeling.GeoLoc"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.GeoLocJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Parse JSON into a GeoLoc.
            </summary>
            <param name="reader">the reader.</param>
            <param name="typeToConvert">the type to convert.</param>
            <param name="options">the options.</param>
            <returns>A geoloc parsed from json.</returns>
            <exception cref="T:System.FormatException">thrown if geoloc not in valid format for parsing.</exception>
        </member>
        <member name="M:Redis.OM.Modeling.GeoLocJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Redis.OM.Modeling.GeoLoc,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes the <see cref="T:Redis.OM.Modeling.GeoLoc"/> to a string for JSON.
            </summary>
            <param name="writer">the writer.</param>
            <param name="value">the <see cref="T:Redis.OM.Modeling.GeoLoc"/>.</param>
            <param name="options">The options.</param>
        </member>
        <member name="T:Redis.OM.Modeling.HashDiff">
            <summary>
            A diff for a hash type object.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.HashDiff.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Modeling.HashDiff"/> class.
            </summary>
            <param name="setSetFieldValuePairs">values to set.</param>
            <param name="delValues">values to delete.</param>
        </member>
        <member name="P:Redis.OM.Modeling.HashDiff.Script">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Modeling.HashDiff.SerializeScriptArgs">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Modeling.IndexedAttribute">
            <summary>
            Decorate a numeric string or geo field to add an index to it.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.IndexedAttribute.Separator">
            <summary>
            gets or sets the separator to use for string fields. defaults to. <code>|</code>.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.IndexedAttribute.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether text is case sensitive.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.IndexedAttribute.SearchFieldType">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Modeling.IObjectDiff">
            <summary>
            Handles resolving the difference between a snapshot and a current iteration of an object.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.IObjectDiff.Script">
            <summary>
            Gets the name of the script to use.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.IObjectDiff.SerializeScriptArgs">
            <summary>
            Arguments for the script serialized.
            </summary>
            <returns>The args.</returns>
        </member>
        <member name="T:Redis.OM.Modeling.JsonDiff">
            <summary>
            builds a diff for a json object.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.JsonDiff.#ctor(System.String,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Modeling.JsonDiff"/> class.
            </summary>
            <param name="operation">the operation to perform.</param>
            <param name="path">the path to the item in the json.</param>
            <param name="value">the value to set.</param>
        </member>
        <member name="P:Redis.OM.Modeling.JsonDiff.Script">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Modeling.JsonDiff.SerializeScriptArgs">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Modeling.RedisCollectionStateManager">
            <summary>
            Manages the state of the Redis Collection.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.RedisCollectionStateManager.#ctor(Redis.OM.Modeling.DocumentAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Modeling.RedisCollectionStateManager"/> class.
            </summary>
            <param name="attr">The document attribute for the type.</param>
        </member>
        <member name="P:Redis.OM.Modeling.RedisCollectionStateManager.DocumentAttribute">
            <summary>
            Gets the DocumentAttribute for the underlying type.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.RedisCollectionStateManager.Snapshot">
            <summary>
            Gets a snapshot from when the collection enumerated.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.RedisCollectionStateManager.Data">
            <summary>
            Gets or sets the data in its current state.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.RedisCollectionStateManager.Clear">
            <summary>
            Clears out all the data in the state manager at re-enumeration.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.RedisCollectionStateManager.Remove(System.String)">
            <summary>
            Removes the key from the data and snapshot.
            </summary>
            <param name="key">The key to remove.</param>
        </member>
        <member name="M:Redis.OM.Modeling.RedisCollectionStateManager.InsertIntoData(System.String,System.Object)">
            <summary>
            Add item to data.
            </summary>
            <param name="key">the item's key.</param>
            <param name="value">the item's value.</param>
        </member>
        <member name="M:Redis.OM.Modeling.RedisCollectionStateManager.InsertIntoSnapshot(System.String,System.Object)">
            <summary>
            Add item to snapshot.
            </summary>
            <param name="key">the item's key.</param>
            <param name="value">the current value of the item.</param>
        </member>
        <member name="M:Redis.OM.Modeling.RedisCollectionStateManager.TryDetectDifferencesSingle(System.String,System.Object,System.Collections.Generic.IList{Redis.OM.Modeling.IObjectDiff}@)">
            <summary>
            Builds a diff for a single object from what's currently in the snapshot.
            </summary>
            <param name="key">the key of the object in redis.</param>
            <param name="value">The current value.</param>
            <param name="differences">The detected differences.</param>
            <returns>Whether a diff could be constructed.</returns>
        </member>
        <member name="M:Redis.OM.Modeling.RedisCollectionStateManager.DetectDifferences">
            <summary>
            Detects the differences.
            </summary>
            <returns>a difference dictionary.</returns>
        </member>
        <member name="M:Redis.OM.Modeling.RedisCollectionStateManager.FindDiff(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Builds a difference JObject between json objects
            lifted with some minor modifications from Dmitry Polyakov's answer in SO
            https://stackoverflow.com/a/53654737/7299345.
            </summary>
            <param name="currentObject">current object.</param>
            <param name="snapshotObject">snapshot object.</param>
            <returns>a jobject containing a diff.</returns>
        </member>
        <member name="T:Redis.OM.Modeling.RedisFieldAttribute">
            <summary>
            An attribute representing a particular field to be stored in redis.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.RedisFieldAttribute.PropertyName">
            <summary>
            Gets or sets the property's name in redis.
            </summary>
        </member>
        <member name="T:Redis.OM.Modeling.RedisIdFieldAttribute">
            <summary>
            Indicates which is the Id field.
            </summary>
        </member>
        <member name="T:Redis.OM.Modeling.RedisIndex">
            <summary>
            A utility class for serializing objects into Redis Indices.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.RedisIndex.GetObjectDefinition(System.Type)">
            <summary>
            Pull out the Document attribute from a Type.
            </summary>
            <param name="type">The type to pull the attribute out from.</param>
            <returns>A documentation attribute.</returns>
        </member>
        <member name="M:Redis.OM.Modeling.RedisIndex.SerializeIndex(System.Type)">
            <summary>
            Serialize the Index.
            </summary>
            <param name="type">The type to be indexed.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if type provided is not decorated with a RedisObjectDefinitionAttribute.</exception>
            <returns>An array of strings (the serialized args for redis).</returns>
        </member>
        <member name="T:Redis.OM.Modeling.RedisIndexingException">
            <summary>
            An exception thrown when trying to index classes in Redis.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.RedisIndexingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Modeling.RedisIndexingException"/> class.
            </summary>
            <param name="message">the message.</param>
        </member>
        <member name="T:Redis.OM.Modeling.RedisSchemaField">
            <summary>
            utility methods for serializing schema fields.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.RedisSchemaField.IsComplexType(System.Type)">
            <summary>
            Checks the type to see if it's a complex type that cannot be used as a scalar in RediSearch.
            </summary>
            <param name="type">The Type to check.</param>
            <returns>Whether not we consider the type to be complex.</returns>
        </member>
        <member name="M:Redis.OM.Modeling.RedisSchemaField.SerializeArgsJson(System.Reflection.PropertyInfo,System.Int32,System.String,System.String)">
            <summary>
            gets the schema field args serialized for json.
            </summary>
            <param name="info">The property info.</param>
            <param name="remainingDepth">The remaining allowable depth in the reccurance.</param>
            <param name="pathPrefix">The current prefix of the parent attribute.</param>
            <param name="aliasPrefix">The prefix of the alias.</param>
            <returns>The create index args for the schema field for JSON.</returns>
        </member>
        <member name="M:Redis.OM.Modeling.RedisSchemaField.SerializeArgs(System.Reflection.PropertyInfo)">
            <summary>
            Serializes the property info into index arguments.
            </summary>
            <param name="info">the property info.</param>
            <returns>FT.CREATE serialized args.</returns>
        </member>
        <member name="T:Redis.OM.Modeling.SearchableAttribute">
            <summary>
            Marks a field as searchable within a Redis Document.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.SearchableAttribute.NoStem">
            <summary>
            Gets or sets a value indicating whether whether or not to index with stemming.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.SearchableAttribute.PhoneticMatcher">
            <summary>
            Gets or sets a value indicting which phonetic matcher to use.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.SearchableAttribute.Weight">
            <summary>
            Gets or sets the weight of a given field.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.SearchableAttribute.SearchFieldType">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Modeling.SearchFieldAttribute">
            <summary>
            Decorates a field that you want to index.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.SearchFieldAttribute.Sortable">
            <summary>
            Gets or sets a value indicating whether the field will be sortable.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.SearchFieldAttribute.Aggregatable">
            <summary>
            Gets or sets a value indicating whether the field will be aggregatable.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.SearchFieldAttribute.Normalize">
            <summary>
            Gets or sets a value indicating whether text will be normalized when indexed
            (sent to lower case with no diacritics). Defaults to true.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.SearchFieldAttribute.JsonPath">
            <summary>
            Gets or sets the JSON path to the desired attribute to index. This is used for
            indexing individual fields within objects. Defaults to ".", which assumes the entire field will be indexed
            If the indexed field is a scalar, it will only index that field. If that index is an object the index
            will be recursively built based off the <see cref="P:Redis.OM.Modeling.SearchFieldAttribute.CascadeDepth"/>.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.SearchFieldAttribute.CascadeDepth">
            <summary>
            Gets or sets the depth into the object graph to automatically generate the index.
            </summary>
        </member>
        <member name="P:Redis.OM.Modeling.SearchFieldAttribute.SearchFieldType">
            <summary>
            Gets the type of index.
            </summary>
        </member>
        <member name="T:Redis.OM.Modeling.SearchFieldType">
            <summary>
            The search field type.
            </summary>
        </member>
        <member name="F:Redis.OM.Modeling.SearchFieldType.TEXT">
            <summary>
            A text index field.
            </summary>
        </member>
        <member name="F:Redis.OM.Modeling.SearchFieldType.NUMERIC">
            <summary>
            A numeric index field.
            </summary>
        </member>
        <member name="F:Redis.OM.Modeling.SearchFieldType.GEO">
            <summary>
            A geo index field.
            </summary>
        </member>
        <member name="F:Redis.OM.Modeling.SearchFieldType.TAG">
            <summary>
            A tag index field.
            </summary>
        </member>
        <member name="F:Redis.OM.Modeling.SearchFieldType.INDEXED">
            <summary>
            A generically indexed field - the library will figure out how to index.
            </summary>
        </member>
        <member name="T:Redis.OM.Modeling.StorageType">
            <summary>
            Determine how the item will be stored in Redis.
            </summary>
        </member>
        <member name="F:Redis.OM.Modeling.StorageType.Hash">
            <summary>
            Store as a hash.
            </summary>
        </member>
        <member name="F:Redis.OM.Modeling.StorageType.Json">
            <summary>
            Store as JSON.
            </summary>
        </member>
        <member name="T:Redis.OM.Modeling.TypeDeterminationUtilities">
            <summary>
            Utilities to determine the type of a thing.
            </summary>
        </member>
        <member name="M:Redis.OM.Modeling.TypeDeterminationUtilities.IsNumeric(System.Type)">
            <summary>
            Is the type numeric.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Whether the type is numeric or not.</returns>
        </member>
        <member name="M:Redis.OM.Modeling.TypeDeterminationUtilities.GetSearchFieldType(System.Type)">
            <summary>
            Determine the SearchFieldType for the given type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>The SearchFieldType.</returns>
            <exception cref="T:System.ArgumentException">Thrown if search field is of an unrecognized type.</exception>
        </member>
        <member name="M:Redis.OM.Modeling.TypeDeterminationUtilities.GetSearchFieldFromEnumProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines SearchFieldType of provided property info.
            </summary>
            <param name="info">The PropertyInfo to check.</param>
            <returns>The Search field type.</returns>
        </member>
        <member name="T:Redis.OM.GeoLocDistanceUnit">
            <summary>
            A distance unit.
            </summary>
        </member>
        <member name="F:Redis.OM.GeoLocDistanceUnit.Meters">
            <summary>
            meters.
            </summary>
        </member>
        <member name="F:Redis.OM.GeoLocDistanceUnit.Kilometers">
            <summary>
            kilometers.
            </summary>
        </member>
        <member name="F:Redis.OM.GeoLocDistanceUnit.Miles">
            <summary>
            miles.
            </summary>
        </member>
        <member name="F:Redis.OM.GeoLocDistanceUnit.Feet">
            <summary>
            feet.
            </summary>
        </member>
        <member name="T:Redis.OM.IIdGenerationStrategy">
            <summary>
            The strategy the library will use for generating unique IDs.
            </summary>
        </member>
        <member name="M:Redis.OM.IIdGenerationStrategy.GenerateId">
            <summary>
            generates a unique id.
            </summary>
            <returns>the id.</returns>
        </member>
        <member name="T:Redis.OM.PredicateBuilder">
            <summary>
            Enables the efficient, dynamic composition of query predicates.
             credit to the author Ano Mepani whose <see href="https://www.c-sharpcorner.com/UploadFile/c42694/dynamic-query-in-linq-using-predicate-builder/">post</see> this class was taken from, with some light edits.
            </summary>
        </member>
        <member name="M:Redis.OM.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using the logical "and".
            </summary>
            <param name="first">The first expression.</param>
            <param name="second">The second expression.</param>
            <typeparam name="T">The parameter type for the expression.</typeparam>
            <returns>the combined expression.</returns>
        </member>
        <member name="M:Redis.OM.PredicateBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Combines the first expression with the second using the specified merge function.
            </summary>
        </member>
        <member name="T:Redis.OM.RedisCommands">
            <summary>
            Extension methods for redis commands.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisCommands.SetAsync(Redis.OM.Contracts.IRedisConnection,System.Object)">
            <summary>
            Serializes an object to either hash or json (depending on how it's decorated), and saves it in redis.
            </summary>
            <param name="connection">connection to redis.</param>
            <param name="obj">the object to save.</param>
            <returns>the key for the object.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.SetAsync(Redis.OM.Contracts.IRedisConnection,System.Object,System.TimeSpan)">
            <summary>
            Serializes an object to either hash or json (depending on how it's decorated), and saves it in redis.
            </summary>
            <param name="connection">connection to redis.</param>
            <param name="obj">the object to save.</param>
            <param name="timeSpan">the expiry date of the key (TTL).</param>
            <returns>the key for the object.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.HSetAsync(Redis.OM.Contracts.IRedisConnection,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Set's values in a hash.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key.</param>
            <param name="fieldValues">the field value pairs to set.</param>
            <returns>How many new fields were created.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.HSetAsync(Redis.OM.Contracts.IRedisConnection,System.String,System.TimeSpan,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Set's values in a hash.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key.</param>
            <param name="timeSpan">the the timespan to set for your (TTL).</param>
            <param name="fieldValues">the field value pairs to set.</param>
            <returns>How many new fields were created.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSetAsync(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.String)">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="json">the json.</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSetAsync(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.Object)">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="obj">the object to be converted to json.</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSetAsync(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.String,System.TimeSpan)">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="json">the json.</param>
            <param name="timeSpan">the the timespan to set for your (TTL).</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSetAsync(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="obj">the object to be converted to json.</param>
            <param name="timeSpan">the expiry date of the key (TTL).</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSetAsync(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.String,Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="json">the json.</param>
            <param name="when">XX - set if exist, NX - set if not exist.</param>
            <param name="timeSpan">the the timespan to set for your (TTL).</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSetAsync(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.Object,Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="obj">the object to serialize to json.</param>
            <param name="when">XX - set if exist, NX - set if not exist.</param>
            <param name="timeSpan">the the timespan to set for your (TTL).</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.HSet(Redis.OM.Contracts.IRedisConnection,System.String,System.TimeSpan,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Set's values in a hash.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key.</param>
            <param name="timeSpan">the the timespan to set for your (TTL).</param>
            <param name="fieldValues">the field value pairs to set.</param>
            <returns>How many new fields were created.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.HSet(Redis.OM.Contracts.IRedisConnection,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Set's values in a hash.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key.</param>
            <param name="fieldValues">the field value pairs to set.</param>
            <returns>How many new fields were created.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSet(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.String)">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="json">the json.</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSet(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.Object)">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="obj">the object to serialize to json.</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSet(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.String,System.TimeSpan)">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="json">the json.</param>
            <param name="timeSpan">the the timespan to set for your (TTL).</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSet(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="obj">the object to serialize to json.</param>
            <param name="timeSpan">the the timespan to set for your (TTL).</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSet(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.String,Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="json">the json.</param>
            <param name="when">XX - set if exist, NX - set if not exist.</param>
            <param name="timeSpan">the the timespan to set for your (TTL).</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonSet(Redis.OM.Contracts.IRedisConnection,System.String,System.String,System.Object,Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <summary>
            Sets a value as JSON in redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key for the object.</param>
            <param name="path">the path within the json to set.</param>
            <param name="obj">the object to serialize to json.</param>
            <param name="when">XX - set if exist, NX - set if not exist.</param>
            <param name="timeSpan">the the timespan to set for your (TTL).</param>
            <returns>whether the operation succeeded.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.Set(Redis.OM.Contracts.IRedisConnection,System.Object)">
            <summary>
            Serializes an object to either hash or json (depending on how it's decorated), and saves it in redis.
            </summary>
            <param name="connection">connection to redis.</param>
            <param name="obj">the object to save.</param>
            <returns>the key for the object.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.Set(Redis.OM.Contracts.IRedisConnection,System.Object,Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <summary>
            Serializes an object to either hash or json (depending on how it's decorated, and saves it to redis conditionally based on the WhenKey,
            NOTE: <see cref="F:Redis.OM.WhenKey.Exists"/> will replace the object in redis if it exists.
            </summary>
            <param name="connection">The connection to redis.</param>
            <param name="obj">The object to save.</param>
            <param name="when">The condition for when to set the object.</param>
            <param name="timespan">The length of time before the key expires.</param>
            <returns>the key for the object, null if nothing was set.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.SetAsync(Redis.OM.Contracts.IRedisConnection,System.Object,Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <summary>
            Serializes an object to either hash or json (depending on how it's decorated, and saves it to redis conditionally based on the WhenKey,
            NOTE: <see cref="F:Redis.OM.WhenKey.Exists"/> will replace the object in redis if it exists.
            </summary>
            <param name="connection">The connection to redis.</param>
            <param name="obj">The object to save.</param>
            <param name="when">The condition for when to set the object.</param>
            <param name="timespan">The length of time before the key expires.</param>
            <returns>the key for the object, null if nothing was set.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.Set(Redis.OM.Contracts.IRedisConnection,System.Object,System.TimeSpan)">
            <summary>
            Serializes an object to either hash or json (depending on how it's decorated), and saves it in redis.
            </summary>
            <param name="connection">connection to redis.</param>
            <param name="obj">the object to save.</param>
            <param name="timeSpan">the the timespan to set for your (TTL).</param>
            <returns>the key for the object.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.Get``1(Redis.OM.Contracts.IRedisConnection,System.String)">
            <summary>
            Gets an object of the provided type from redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="keyName">the key.</param>
            <typeparam name="T">The type to parse the result out to.</typeparam>
            <returns>the object out of redis.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.GetAsync``1(Redis.OM.Contracts.IRedisConnection,System.String)">
            <summary>
            Gets an object of the provided type from redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="keyName">the key.</param>
            <typeparam name="T">The type to parse the result out to.</typeparam>
            <returns>the object out of redis.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonGet``1(Redis.OM.Contracts.IRedisConnection,System.String,System.String[])">
            <summary>
            Get's an object out of redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key.</param>
            <param name="paths">the paths to retrieve.</param>
            <typeparam name="T">the type to deserialize into.</typeparam>
            <returns>the object pulled out of redis.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.JsonGetAsync``1(Redis.OM.Contracts.IRedisConnection,System.String,System.String[])">
            <summary>
            Get's an object out of redis.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key.</param>
            <param name="paths">the paths to retrieve.</param>
            <typeparam name="T">the type to deserialize into.</typeparam>
            <returns>the object pulled out of redis.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.HGetAll(Redis.OM.Contracts.IRedisConnection,System.String)">
            <summary>
            retrieves an object out of redis and puts it into a dictionary.
            </summary>
            <param name="connection">the connection.</param>
            <param name="keyName">the key name.</param>
            <returns>the object serialized into a dictionary.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.HGetAllAsync(Redis.OM.Contracts.IRedisConnection,System.String)">
            <summary>
            retrieves an object out of redis and puts it into a dictionary.
            </summary>
            <param name="connection">the connection.</param>
            <param name="keyName">the key name.</param>
            <returns>the object serialized into a dictionary.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.CreateAndEvalAsync(Redis.OM.Contracts.IRedisConnection,System.String,System.String[],System.String[],System.String)">
            <summary>
            Creates an evaluates a script.
            </summary>
            <param name="connection">the connection.</param>
            <param name="scriptName">the script's name.</param>
            <param name="keys">the keys to use.</param>
            <param name="argv">the arguments to use.</param>
            <param name="fullScript">the full script.</param>
            <returns>the result.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the script cannot be resolved either the script is empty or the script name has not been encountered.</exception>
        </member>
        <member name="M:Redis.OM.RedisCommands.CreateAndEval(Redis.OM.Contracts.IRedisConnection,System.String,System.String[],System.String[],System.String)">
            <summary>
            Creates an evaluates a script.
            </summary>
            <param name="connection">the connection.</param>
            <param name="scriptName">the script's name.</param>
            <param name="keys">the keys to use.</param>
            <param name="argv">the arguments to use.</param>
            <param name="fullScript">the full script.</param>
            <returns>the result.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the script cannot be resolved either the script is empty or the script name has not been encountered.</exception>
        </member>
        <member name="M:Redis.OM.RedisCommands.Unlink(Redis.OM.Contracts.IRedisConnection,System.String)">
            <summary>
            Unlinks a key.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key to unlink.</param>
            <returns>the status.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.Unlink(Redis.OM.Contracts.IRedisConnection,System.String[])">
            <summary>
            Unlinks array of keys.
            </summary>
            <param name="connection">the connection.</param>
            <param name="keys">the keys to unlink.</param>
            <returns>the status.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.UnlinkAsync(Redis.OM.Contracts.IRedisConnection,System.String)">
            <summary>
            Unlinks a key.
            </summary>
            <param name="connection">the connection.</param>
            <param name="key">the key to unlink.</param>
            <returns>the status.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.UnlinkAsync(Redis.OM.Contracts.IRedisConnection,System.String[])">
            <summary>
            Unlinks array of keys.
            </summary>
            <param name="connection">the connection.</param>
            <param name="keys">the keys to unlink.</param>
            <returns>the status.</returns>
        </member>
        <member name="M:Redis.OM.RedisCommands.UnlinkAndSet``1(Redis.OM.Contracts.IRedisConnection,System.String,``0,Redis.OM.Modeling.StorageType)">
            <summary>
            Unlinks the key and then adds an updated value of it.
            </summary>
            <param name="connection">The connection to redis.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="storageType">The storage type of the value.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Redis.OM.RedisCommands.UnlinkAndSetAsync``1(Redis.OM.Contracts.IRedisConnection,System.String,``0,Redis.OM.Modeling.StorageType)">
            <summary>
            Unlinks the key and then adds an updated value of it.
            </summary>
            <param name="connection">The connection to redis.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="storageType">The storage type of the value.</param>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Redis.OM.RedisConnection">
            <summary>
            A connection to redis.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisConnection.#ctor(StackExchange.Redis.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisConnection"/> class.
            </summary>
            <param name="db">StackExchange.Redis IDatabase object.</param>
        </member>
        <member name="M:Redis.OM.RedisConnection.Execute(System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisConnection.ExecuteAsync(System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisConnection.ExecuteInTransaction(System.Tuple{System.String,System.String[]}[])">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisConnection.ExecuteInTransactionAsync(System.Tuple{System.String,System.String[]}[])">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisConnection.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.RedisConnectionConfiguration">
            <summary>
            Configuration to use to configure redis.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisConnectionConfiguration.Host">
            <summary>
            Gets or sets the Host name.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisConnectionConfiguration.Port">
            <summary>
            Gets or sets the Port.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisConnectionConfiguration.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisConnectionConfiguration.ToStackExchangeConnectionString">
            <summary>
            Builds SE connection string.
            </summary>
            <returns>A connection string.</returns>
        </member>
        <member name="T:Redis.OM.RedisConnectionProvider">
            <summary>
            Provides a connection to redis.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisConnectionProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisConnectionProvider"/> class.
            </summary>
            <param name="connectionString">The string to use to connect to redis.</param>
        </member>
        <member name="M:Redis.OM.RedisConnectionProvider.#ctor(Redis.OM.RedisConnectionConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisConnectionProvider"/> class.
            </summary>
            <param name="connectionConfig">The configuration.</param>
        </member>
        <member name="M:Redis.OM.RedisConnectionProvider.#ctor(StackExchange.Redis.ConfigurationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisConnectionProvider"/> class.
            </summary>
            <param name="configurationOptions">The options relevant to a set of redis connections.</param>
        </member>
        <member name="M:Redis.OM.RedisConnectionProvider.#ctor(StackExchange.Redis.IConnectionMultiplexer)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisConnectionProvider"/> class.
            </summary>
            <param name="connectionMultiplexer">The options relevant to a set of redis connections.</param>
        </member>
        <member name="P:Redis.OM.RedisConnectionProvider.Connection">
            <summary>
            Gets a command level interface to redis.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisConnectionProvider.AggregationSet``1(System.Int32)">
            <summary>
            Gets an aggregation set for redis.
            </summary>
            <typeparam name="T">The indexed type to run aggregations on.</typeparam>
            <param name="chunkSize">Size of chunks to use during pagination, larger chunks = larger payloads returned but fewer round trips.</param>
            <returns>the aggregation set.</returns>
        </member>
        <member name="M:Redis.OM.RedisConnectionProvider.RedisCollection``1(System.Int32)">
            <summary>
            Gets a redis collection.
            </summary>
            <typeparam name="T">The type the collection will be retrieving.</typeparam>
            <param name="chunkSize">Size of chunks to use during pagination, larger chunks = larger payloads returned but fewer round trips.</param>
            <returns>A RedisCollection.</returns>
        </member>
        <member name="M:Redis.OM.RedisConnectionProvider.RedisCollection``1(System.Boolean,System.Int32)">
            <summary>
            Gets a redis collection.
            </summary>
            <typeparam name="T">The type the collection will be retrieving.</typeparam>
            <param name="saveState">Whether or not the RedisCollection should maintain the state of documents it enumerates.</param>
            <param name="chunkSize">Size of chunks to use during pagination, larger chunks = larger payloads returned but fewer round trips.</param>
            <returns>A RedisCollection.</returns>
        </member>
        <member name="T:Redis.OM.RediSearchCommands">
            <summary>
            extension methods for redisearch.
            </summary>
        </member>
        <member name="M:Redis.OM.RediSearchCommands.Search``1(Redis.OM.Contracts.IRedisConnection,Redis.OM.Searching.Query.RedisQuery)">
            <summary>
            Search redis with the given query.
            </summary>
            <param name="connection">the connection to redis.</param>
            <param name="query">the query to use in the search.</param>
            <typeparam name="T">the type.</typeparam>
            <returns>A typed search response.</returns>
        </member>
        <member name="M:Redis.OM.RediSearchCommands.SearchAsync``1(Redis.OM.Contracts.IRedisConnection,Redis.OM.Searching.Query.RedisQuery)">
            <summary>
            Search redis with the given query.
            </summary>
            <param name="connection">the connection to redis.</param>
            <param name="query">the query to use in the search.</param>
            <typeparam name="T">the type.</typeparam>
            <returns>A typed search response.</returns>
        </member>
        <member name="M:Redis.OM.RediSearchCommands.CreateIndex(Redis.OM.Contracts.IRedisConnection,System.Type)">
            <summary>
            Creates an index.
            </summary>
            <param name="connection">the connection.</param>
            <param name="type">the type to use for creating the index.</param>
            <returns>whether the index was created or not.</returns>
        </member>
        <member name="M:Redis.OM.RediSearchCommands.CreateIndexAsync(Redis.OM.Contracts.IRedisConnection,System.Type)">
            <summary>
            Creates an index.
            </summary>
            <param name="connection">the connection.</param>
            <param name="type">the type to use for creating the index.</param>
            <returns>whether the index was created or not.</returns>
        </member>
        <member name="M:Redis.OM.RediSearchCommands.GetIndexInfo(Redis.OM.Contracts.IRedisConnection,System.Type)">
            <summary>
            Get index information.
            </summary>
            <param name="connection">the connection.</param>
            <param name="type">the type that maps to the index.</param>
            <returns>Strong-typed result of FT.INFO idx.</returns>
        </member>
        <member name="M:Redis.OM.RediSearchCommands.GetIndexInfoAsync(Redis.OM.Contracts.IRedisConnection,System.Type)">
            <summary>
            Get index information.
            </summary>
            <param name="connection">the connection.</param>
            <param name="type">the type that maps to the index.</param>
            <returns>Strong-typed result of FT.INFO idx.</returns>
        </member>
        <member name="M:Redis.OM.RediSearchCommands.DropIndexAsync(Redis.OM.Contracts.IRedisConnection,System.Type)">
            <summary>
            Deletes an index.
            </summary>
            <param name="connection">the connection.</param>
            <param name="type">the type to drop the index for.</param>
            <returns>whether the index was dropped or not.</returns>
        </member>
        <member name="M:Redis.OM.RediSearchCommands.DropIndex(Redis.OM.Contracts.IRedisConnection,System.Type)">
            <summary>
            Deletes an index.
            </summary>
            <param name="connection">the connection.</param>
            <param name="type">the type to drop the index for.</param>
            <returns>whether the index was dropped or not.</returns>
        </member>
        <member name="M:Redis.OM.RediSearchCommands.DropIndexAndAssociatedRecords(Redis.OM.Contracts.IRedisConnection,System.Type)">
            <summary>
            Deletes an index. And drops associated records.
            </summary>
            <param name="connection">the connection.</param>
            <param name="type">the type to drop the index for.</param>
            <returns>whether the index was dropped or not.</returns>
        </member>
        <member name="M:Redis.OM.RediSearchCommands.SearchRawResult(Redis.OM.Contracts.IRedisConnection,Redis.OM.Searching.Query.RedisQuery)">
            <summary>
            Search redis with the given query.
            </summary>
            <param name="connection">the connection to redis.</param>
            <param name="query">the query to use in the search.</param>
            <returns>a Redis reply.</returns>
        </member>
        <member name="M:Redis.OM.RediSearchCommands.SearchRawResultAsync(Redis.OM.Contracts.IRedisConnection,Redis.OM.Searching.Query.RedisQuery)">
            <summary>
            Search redis with the given query.
            </summary>
            <param name="connection">the connection to redis.</param>
            <param name="query">the query to use in the search.</param>
            <returns>a Redis reply.</returns>
        </member>
        <member name="T:Redis.OM.RedisIndexInfo">
            <summary>
            A strong type class for mapping result from FT.INFO (see https://redis.io/commands/ft.info/ for detail).
            </summary>
        </member>
        <member name="M:Redis.OM.RedisIndexInfo.#ctor(Redis.OM.RedisReply)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisIndexInfo"/> class.
            </summary>
            <param name="redisReply">result form FT.INFO idx.</param>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.IndexName">
            <summary>
            Gets index_name.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.IndexOptions">
            <summary>
            Gets index_options.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.IndexDefinition">
            <summary>
            Gets index_definition.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.Attributes">
            <summary>
            Gets attributes. Note that it used to be called fields in the documentation.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.NumDocs">
            <summary>
            Gets num_docs.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.MaxDocId">
            <summary>
            Gets max_doc_id.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.NumTerms">
            <summary>
            Gets num_terms.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.NumRecords">
            <summary>
            Gets num_records.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.InvertedSzMb">
            <summary>
            Gets inverted_sz_mb.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.VectorIndexSzMb">
            <summary>
            Gets vector_index_sz_mb.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.TotalInvertedIndexBlocks">
            <summary>
            Gets total_inverted_index_blocks.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.OffsetVectorsSzMb">
            <summary>
            Gets offset_vectors_sz_mb.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.DocTableSizeMb">
            <summary>
            Gets doc_table_size_mb.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.SortableValuesSizeMb">
            <summary>
            Gets sortable_values_size_mb.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.KeyTableSizeMb">
            <summary>
            Gets key_table_size_mb.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RecordsPerDocAvg">
            <summary>
            Gets records_per_doc_avg.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.BytesPerRecordAvg">
            <summary>
            Gets bytes_per_record_avg.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.OffsetsPerTermAvg">
            <summary>
            Gets offsets_per_term_avg.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.OffsetBitsPerRecordAvg">
            <summary>
            Gets offset_bits_per_record_avg.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.HashIndexingFailures">
            <summary>
            Gets hash_indexing_failures.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.Indexing">
            <summary>
            Gets indexing.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.PercentIndexed">
            <summary>
            Gets percent_indexed.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.GcStats">
            <summary>
            Gets gc_stats.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.CursorStats">
            <summary>
            Gets cursor_stats.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.StopwordsList">
            <summary>
            Gets stopwords_list.
            </summary>
        </member>
        <member name="T:Redis.OM.RedisIndexInfo.RedisIndexInfoIndexOptions">
            <summary>
            A strong type index_options, which is  4) on the list.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisIndexInfo.RedisIndexInfoIndexOptions.#ctor(Redis.OM.RedisReply)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisIndexInfo.RedisIndexInfoIndexOptions"/> class.
            </summary>
            <param name="redisReply">result form FT.INFO idx line 4).</param>
        </member>
        <member name="T:Redis.OM.RedisIndexInfo.RedisIndexInfoIndexDefinition">
            <summary>
            A strong type for an index_definition.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisIndexInfo.RedisIndexInfoIndexDefinition.#ctor(Redis.OM.RedisReply)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisIndexInfo.RedisIndexInfoIndexDefinition"/> class.
            </summary>
            <param name="redisReply">result form FT.INFO idx line 6).</param>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoIndexDefinition.Identifier">
            <summary>
            Gets key_type.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoIndexDefinition.Prefixes">
            <summary>
            Gets prefixes.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoIndexDefinition.DefaultScore">
            <summary>
            Gets default_score.
            </summary>
        </member>
        <member name="T:Redis.OM.RedisIndexInfo.RedisIndexInfoAttribute">
            <summary>
            A strong type for an attribute.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisIndexInfo.RedisIndexInfoAttribute.#ctor(Redis.OM.RedisReply)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisIndexInfo.RedisIndexInfoAttribute"/> class.
            </summary>
            <param name="redisReply">result form FT.INFO idx line 8).</param>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoAttribute.Identifier">
            <summary>
            Gets identifier.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoAttribute.Attribute">
            <summary>
            Gets attribute.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoAttribute.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoAttribute.Separator">
            <summary>
            Gets SEPARATOR.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoAttribute.Sortable">
            <summary>
            Gets SORTABLE.
            </summary>
        </member>
        <member name="T:Redis.OM.RedisIndexInfo.RedisIndexInfoGcStats">
            <summary>
            A strong type for gc_stats, which is  46) on the list.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisIndexInfo.RedisIndexInfoGcStats.#ctor(Redis.OM.RedisReply)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisIndexInfo.RedisIndexInfoGcStats"/> class.
            </summary>
            <param name="redisReply">result form FT.INFO idx line 46).</param>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoGcStats.BytesCollected">
            <summary>
            Gets bytes_collected.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoGcStats.TotalMsRun">
            <summary>
            Gets total_ms_run.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoGcStats.TotalCycles">
            <summary>
            Gets total_cycles.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoGcStats.AverageCycleTimeMs">
            <summary>
            Gets average_cycle_time_ms.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoGcStats.LastRunTimeMs">
            <summary>
            Gets last_run_time_ms.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoGcStats.GcNumericTreesMissed">
            <summary>
            Gets gc_numeric_trees_missed.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoGcStats.GcBlocksDenied">
            <summary>
            Gets gc_blocks_denied.
            </summary>
        </member>
        <member name="T:Redis.OM.RedisIndexInfo.RedisIndexInfoCursorStats">
            <summary>
            A strong type for cursor_stats, which is  46) on the list.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisIndexInfo.RedisIndexInfoCursorStats.#ctor(Redis.OM.RedisReply)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisIndexInfo.RedisIndexInfoCursorStats"/> class.
            </summary>
            <param name="redisReply">result form FT.INFO idx line 48).</param>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoCursorStats.GlobalIdle">
            <summary>
            Gets global_idle.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoCursorStats.GlobalTotal">
            <summary>
            Gets global_total.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoCursorStats.IndexCapacity">
            <summary>
            Gets index_capacity.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisIndexInfo.RedisIndexInfoCursorStats.IndexTotal">
            <summary>
            Gets index_total.
            </summary>
        </member>
        <member name="T:Redis.OM.RedisObjectHandler">
            <summary>
            Serialize and deserialize items to and from redis data types.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisObjectHandler.FromHashSet``1(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Builds object from provided hash set.
            </summary>
            <param name="hash">Hash set to build item from.</param>
            <typeparam name="T">The type to construct.</typeparam>
            <returns>An instance of the requested object.</returns>
            <exception cref="T:System.Exception">Throws an exception if Deserialization fails.</exception>
        </member>
        <member name="M:Redis.OM.RedisObjectHandler.FromHashSet``1(System.Collections.Generic.IDictionary{System.String,Redis.OM.RedisReply})">
            <summary>
            Tries to parse the hash set into a fully or partially hydrated object.
            </summary>
            <param name="hash">The hash to generate the object from.</param>
            <typeparam name="T">The type to convert to.</typeparam>
            <returns>A fully or partially hydrated object.</returns>
            <exception cref="T:System.Exception">Thrown if deserialization fails.</exception>
            <exception cref="T:System.ArgumentException">Thrown if documentAttribute not decorating type.</exception>
        </member>
        <member name="M:Redis.OM.RedisObjectHandler.FromHashSet(System.Collections.Generic.IDictionary{System.String,System.String},System.Type)">
            <summary>
            Turns hash set into a basic object. To be used when you won't know the type at compile time.
            </summary>
            <param name="hash">The hash.</param>
            <param name="type">The type to deserialize to.</param>
            <returns>the deserialized object.</returns>
        </member>
        <member name="M:Redis.OM.RedisObjectHandler.GetId(System.Object)">
            <summary>
            Retrieves the Id from the object.
            </summary>
            <param name="obj">Object to get id from.</param>
            <returns>the id, empty if no id field found.</returns>
        </member>
        <member name="M:Redis.OM.RedisObjectHandler.GetKey(System.Object)">
            <summary>
            Gets the fully formed key name for the given object.
            </summary>
            <param name="obj">the object to pull the key from.</param>
            <returns>The key.</returns>
            <exception cref="T:System.ArgumentException">Thrown if type is invalid or there's no id present on the key.</exception>
        </member>
        <member name="M:Redis.OM.RedisObjectHandler.TryGetKey(System.Object,System.String@)">
            <summary>
            Attempts to pull the key out of the object, returns false if it fails.
            </summary>
            <param name="obj">The object to pull the key out of.</param>
            <param name="key">The key out param.</param>
            <returns>True of a key was parsed, false if not.</returns>
        </member>
        <member name="M:Redis.OM.RedisObjectHandler.GetKeyPrefix(System.Type)">
            <summary>
            Generates the key prefix for the given type and id.
            </summary>
            <param name="type">The type.</param>
            <returns>The key name.</returns>
        </member>
        <member name="M:Redis.OM.RedisObjectHandler.SetId(System.Object)">
            <summary>
            Set's the id of the given field based off the objects id strategy.
            </summary>
            <param name="obj">The object to set the field of.</param>
            <returns>The id.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if Id property is of invalid type.</exception>
            <exception cref="T:System.MissingMemberException">Thrown if class is missing a document attribute decoration.</exception>
        </member>
        <member name="M:Redis.OM.RedisObjectHandler.ExtractPropertyName(System.Reflection.PropertyInfo,System.String@)">
            <summary>
            Retrieve the property name.
            </summary>
            <param name="property">The property.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Redis.OM.RedisObjectHandler.ToObject``1(Redis.OM.RedisReply)">
            <summary>
            Converts redisReply to object.
            </summary>
            <param name="val">The value to initialize from.</param>
            <typeparam name="T">The type to initialize.</typeparam>
            <returns>An object initialized from the type.</returns>
        </member>
        <member name="M:Redis.OM.RedisObjectHandler.BuildHashSet(System.Object)">
            <summary>
            Converts object to a hash set.
            </summary>
            <param name="obj">object to be turned into a hash set.</param>
            <returns>A hash set generated from the object.</returns>
        </member>
        <member name="T:Redis.OM.RedisReply">
            <summary>
            A generic reply from redis which can be explicitly used as an appropriate type.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisReply.#ctor(StackExchange.Redis.RedisResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisReply"/> class.
            </summary>
            <param name="result">the redisResult.</param>
        </member>
        <member name="M:Redis.OM.RedisReply.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisReply"/> class.
            </summary>
            <param name="val">the value.</param>
        </member>
        <member name="M:Redis.OM.RedisReply.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisReply"/> class.
            </summary>
            <param name="val">the value.</param>
        </member>
        <member name="M:Redis.OM.RedisReply.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisReply"/> class.
            </summary>
            <param name="val">the value.</param>
        </member>
        <member name="M:Redis.OM.RedisReply.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisReply"/> class.
            </summary>
            <param name="i">the value.</param>
        </member>
        <member name="M:Redis.OM.RedisReply.#ctor(Redis.OM.RedisReply[])">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.RedisReply"/> class.
            </summary>
            <param name="values">the values.</param>
        </member>
        <member name="P:Redis.OM.RedisReply.Error">
            <summary>
            Gets a value indicating whether the result represents an error.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(Redis.OM.RedisReply)~System.Double">
            <summary>
            implicitly converts the reply to a double.
            </summary>
            <param name="v">the <see cref="T:Redis.OM.RedisReply"/>.</param>
            <returns>the double.</returns>
            <exception cref="T:System.InvalidCastException">thrown if reply could not be converted to a double.</exception>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(Redis.OM.RedisReply)~System.Nullable{System.Double}">
            <summary>
            implicitly converts the reply to a double.
            </summary>
            <param name="v">the <see cref="T:Redis.OM.RedisReply"/>.</param>
            <returns>the double.</returns>
            <exception cref="T:System.InvalidCastException">thrown if reply could not be converted to a double.</exception>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(System.Double)~Redis.OM.RedisReply">
            <summary>
            implicitly converts the reply to a double.
            </summary>
            <param name="d">the double.</param>
            <returns>the reply.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(Redis.OM.RedisReply)~Redis.OM.RedisReply[]">
            <summary>
            implicitly converts the reply to an array of replies.
            </summary>
            <param name="v">the original reply.</param>
            <returns>An array of replies.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(Redis.OM.RedisReply[])~Redis.OM.RedisReply">
            <summary>
            Implicitly converts an array of replies into a single reply.
            </summary>
            <param name="vals">The replies.</param>
            <returns>the single reply.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(Redis.OM.RedisReply)~System.String">
            <summary>
            Converts a redis reply to a string implicitly.
            </summary>
            <param name="v">the reply.</param>
            <returns>the string.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(System.String)~Redis.OM.RedisReply">
            <summary>
            implicitly converts a string into a redis reply.
            </summary>
            <param name="s">the string.</param>
            <returns>the reply.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(Redis.OM.RedisReply)~System.Int32">
            <summary>
            implicitly converts the reply into an integer.
            </summary>
            <param name="v">the reply.</param>
            <returns>the integer.</returns>
            <exception cref="T:System.InvalidCastException">thrown if it could not be converted to an integer.</exception>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(Redis.OM.RedisReply)~System.Nullable{System.Int32}">
            <summary>
            implicitly converts the reply to an integer.
            </summary>
            <param name="v">The redis reply.</param>
            <returns>the integer.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(System.Int32)~Redis.OM.RedisReply">
            <summary>
            Converts an integer to a reply.
            </summary>
            <param name="i">the integer.</param>
            <returns>the reply.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(Redis.OM.RedisReply)~System.Int64">
            <summary>
            converts a redis reply to a long.
            </summary>
            <param name="v">the reply.</param>
            <returns>the long.</returns>
            <exception cref="T:System.InvalidCastException">thrown if a long could not be parsed from the reply.</exception>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(Redis.OM.RedisReply)~System.Nullable{System.Int64}">
            <summary>
            converts a redis reply to a long.
            </summary>
            <param name="v">the reply.</param>
            <returns>the long.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(System.Int64)~Redis.OM.RedisReply">
            <summary>
            converts a long to a redis reply.
            </summary>
            <param name="l">the long.</param>
            <returns>the reply.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(Redis.OM.RedisReply)~System.String[]">
            <summary>
            Converts the reply to an array of strings.
            </summary>
            <param name="v">the reply.</param>
            <returns>the array.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.op_Implicit(Redis.OM.RedisReply)~System.Double[]">
            <summary>
            Converts the reply to an array of doubles.
            </summary>
            <param name="v">the reply.</param>
            <returns>The doubles.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToArray">
            <summary>
            Sends the collection to an array.
            </summary>
            <returns>the RedisReply as an array.</returns>
        </member>
        <member name="M:Redis.OM.RedisReply.GetTypeCode">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToBoolean(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToChar(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToDateTime(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToDecimal(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToDouble(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToSByte(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToSingle(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToString(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToType(System.Type,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToUInt16(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToUInt32(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.RedisReply.ToUInt64(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.RedisSerializationSettings">
            <summary>
            Configurable settings for how serialization and deserialization is handled.
            </summary>
        </member>
        <member name="F:Redis.OM.RedisSerializationSettings.JsonSerializerOptions">
            <summary>
            <see cref="F:Redis.OM.RedisSerializationSettings.JsonSerializerOptions"/> used when serializing.
            </summary>
        </member>
        <member name="P:Redis.OM.RedisSerializationSettings.TimeZone">
            <summary>
            Gets default/assumed timezone used by redis when deserializing datetimes.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisSerializationSettings.UseUtcTime">
            <summary>
            Set the default/assumed <see cref="T:System.TimeZoneInfo"/> for deserialization to <see cref="P:System.TimeZoneInfo.Utc"/> instead of <see cref="P:System.TimeZoneInfo.Local"/>.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisSerializationSettings.UseLocalTime">
            <summary>
            Set the default/assumed <see cref="T:System.TimeZoneInfo"/> for deserialization to the default of <see cref="P:System.TimeZoneInfo.Local"/>.
            </summary>
        </member>
        <member name="T:Redis.OM.RedisUriParser">
            <summary>
            URI parsing utility.
            </summary>
        </member>
        <member name="M:Redis.OM.RedisUriParser.ParseConfigFromUri(System.String)">
            <summary>
            Parses a Config options for StackExchange Redis from the URI.
            </summary>
            <param name="uriString">The URI.</param>
            <returns>A configuration options result for SE.Redis.</returns>
        </member>
        <member name="T:Redis.OM.Scripts">
            <summary>
            Holds the scripts.
            </summary>
        </member>
        <member name="F:Redis.OM.Scripts.JsonDiffResolution">
            <summary>
            resolves a difference in JSON.
            </summary>
        </member>
        <member name="F:Redis.OM.Scripts.HashDiffResolution">
            <summary>
            resolves a difference in a hash.
            </summary>
        </member>
        <member name="F:Redis.OM.Scripts.Unlink">
            <summary>
            unlinks a key.
            </summary>
        </member>
        <member name="F:Redis.OM.Scripts.UnlinkAndSetHash">
            <summary>
            Unlinks and sets a key for a Hash model.
            </summary>
        </member>
        <member name="F:Redis.OM.Scripts.UnlinkAndSendJson">
            <summary>
            Unlinks a JSON object and sets the key again with a fresh new JSON object.
            </summary>
        </member>
        <member name="F:Redis.OM.Scripts.HsetIfNotExists">
            <summary>
            Conditionally calls a hset if a key doesn't exist.
            </summary>
        </member>
        <member name="F:Redis.OM.Scripts.ReplaceHashIfExists">
            <summary>
            replaces hash if key exists.
            </summary>
        </member>
        <member name="F:Redis.OM.Scripts.JsonSetWithExpire">
            <summary>
            Sets a Json object, if the object is set, and there is an expiration, also set expiration.
            </summary>
        </member>
        <member name="F:Redis.OM.Scripts.ScriptCollection">
            <summary>
            The scripts.
            </summary>
        </member>
        <member name="P:Redis.OM.Scripts.ShaCollection">
            <summary>
            Gets or sets collection of SHAs.
            </summary>
        </member>
        <member name="T:Redis.OM.SearchExtensions">
            <summary>
            Extensions of the Queryable Type for RedisCollections.
            </summary>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Apply``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}},System.String)">
            <summary>
            Apply the provided expression to data in Redis.
            </summary>
            <param name="source">The Aggregation set.</param>
            <param name="expression">The expression to apply.</param>
            <param name="alias">The alias of the result.</param>
            <typeparam name="T">Indexed type being applied to.</typeparam>
            <typeparam name="TR">Type Yielded.</typeparam>
            <returns>An Aggregation set.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Filter``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Boolean}})">
            <summary>
            Filters results based off of expression.
            </summary>
            <param name="source">AggregationSet to be filtered.</param>
            <param name="expression">The Expression to apply as the filter.</param>
            <typeparam name="T">The indexed type to act on.</typeparam>
            <returns>An aggregation set with the expression in the pipeline.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Count``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Boolean}})">
            <summary>
            Count the instances where the expression is true.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The expression to apply.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The Count.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Where``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Boolean}})">
            <summary>
            Initial query expression if applied first, filter expression if applied later for the items to be aggregated by redis.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The filtration expression.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>An Aggregation set with the expression in the pipeline.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Where``1(Redis.OM.Searching.IRedisCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Initial query expression for the Redis Collection.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The filtration expression.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>A RedisCollection with the expression in the pipeline.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Select``2(Redis.OM.Searching.IRedisCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Specifies which items to pull out of Redis.
            </summary>
            <param name="source">The Redis Collection.</param>
            <param name="expression">The expression for creating the item.</param>
            <typeparam name="T">The indexed type built on.</typeparam>
            <typeparam name="TR">The type returned.</typeparam>
            <returns>A redis collection with the expression applied.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Skip``1(Redis.OM.Searching.IRedisCollection{``0},System.Int32)">
            <summary>
            Skips into the collection by the specified amount.
            </summary>
            <param name="source">The Redis Collection.</param>
            <param name="count">The number of items to skip.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>A RedisCollection with the skip expression applied.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Take``1(Redis.OM.Searching.IRedisCollection{``0},System.Int32)">
            <summary>
            Specifies the number of records to retrieve from Redis.
            </summary>
            <param name="source">The RedisCollection.</param>
            <param name="count">The number of Items to retrieve.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>A RedisCollection with the expression applied.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.CountDistinct``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Counts distinct elements matching the expression.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The expression to count.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TCount">The result type to count.</typeparam>
            <returns>The count of distinct elements.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.CountDistinctAsync``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Approximate count of distinct elements matching the expression.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The expression to count.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TCount">The result type to count.</typeparam>
            <returns>The count of distinct elements.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.CountGroupMembers``1(Redis.OM.Aggregation.GroupedAggregationSet{``0})">
            <summary>
            Get's a count of the members of an aggregation group.
            </summary>
            <param name="source">The source.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The counts of the members within all the groups.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.CountDistinct``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Counts distinct elements matching the expression.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The expression to count.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TCount">The result type to count.</typeparam>
            <returns>The count of distinct elements.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.CountDistinctish``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Approximate count of distinct elements matching the expression.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The expression to count.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TCount">The result type to count.</typeparam>
            <returns>The count of distinct elements.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.StandardDeviation``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Calculates the standard deviation of records of the given field.
            </summary>
            <param name="source">The Aggregation Set.</param>
            <param name="expression">The expression to apply.</param>
            <typeparam name="T">The indexed Type.</typeparam>
            <typeparam name="TReduce">The type to reduce.</typeparam>
            <returns>The standard deviation.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.StandardDeviationAsync``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Calculates the standard deviation of records of the given field.
            </summary>
            <param name="source">The Aggregation Set.</param>
            <param name="expression">The expression to apply.</param>
            <typeparam name="T">The indexed Type.</typeparam>
            <typeparam name="TReduce">The type to reduce.</typeparam>
            <returns>The standard deviation.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Distinct``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Gets distinct element for the given field.
            </summary>
            <param name="source">Aggregation set.</param>
            <param name="expression">The expression containing the field to get distinct fields for.</param>
            <typeparam name="T">The indexed Type.</typeparam>
            <typeparam name="TResult">The type that you are retrieving.</typeparam>
            <returns>An AggregationSet with the expression in the pipeline.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Distinct``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Gets distinct element for the given field.
            </summary>
            <param name="source">Aggregation set.</param>
            <param name="expression">The expression containing the field to get distinct fields for.</param>
            <typeparam name="T">The indexed Type.</typeparam>
            <typeparam name="TResult">The type that you are retrieving.</typeparam>
            <returns>An AggregationSet with the expression in the pipeline.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.FirstValue``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Retrieve the first value matching the expression in Redis.
            </summary>
            <param name="source">The RedisAggregationSet.</param>
            <param name="expression">The expression to apply.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <returns>The First Value.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.FirstValueAsync``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Retrieve the first value matching the expression in Redis.
            </summary>
            <param name="source">The RedisAggregationSet.</param>
            <param name="expression">The expression to apply.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <returns>The First Value.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.FirstValue``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Retrieve the first value matching the expression in Redis.
            </summary>
            <param name="source">The RedisAggregationSet.</param>
            <param name="expression">The expression to apply.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <returns>The First Value.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.FirstValue``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}},System.String,Redis.OM.Searching.SortDirection)">
            <summary>
            Retrieve the first value matching the expression in Redis.
            </summary>
            <param name="source">The RedisAggregationSet.</param>
            <param name="expression">The expression to apply.</param>
            <param name="sortedBy">parameter to sort by.</param>
            <param name="direction">direction to sor.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <returns>The First Value.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.FirstValue``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}},System.String)">
            <summary>
            Retrieve the first value matching the expression in Redis.
            </summary>
            <param name="source">The RedisAggregationSet.</param>
            <param name="expression">The expression to apply.</param>
            <param name="sortedBy">Direction to sort results by.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <returns>The First Value.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.FirstValueAsync``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}},System.String,Redis.OM.Searching.SortDirection)">
            <summary>
            Get the first value from redis matching the expression.
            </summary>
            <param name="source">the RedisAggregationSet.</param>
            <param name="expression">The expression To match.</param>
            <param name="sortedBy">The field to sort the records in Redis by.</param>
            <param name="direction">The direction to sort the records.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TResult">The result type of the expression.</typeparam>
            <returns>A redis reply containing the result.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.FirstValueAsync``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}},System.String)">
            <summary>
            Get the first value from redis matching the expression.
            </summary>
            <param name="source">the RedisAggregationSet.</param>
            <param name="expression">The expression To match.</param>
            <param name="sortedBy">The field to sort the records in Redis by.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TResult">The result type of the expression.</typeparam>
            <returns>A redis reply containing the result.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.RandomSample``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}},System.Int64)">
            <summary>
            Gets a random sample from Redis.
            </summary>
            <param name="source">The Source.</param>
            <param name="expression">The expression containing the field to get the random sample for.</param>
            <param name="sampleSize">Random sample size.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <returns>Aggregation set with the random sample in the pipeline.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.GeoFilter``1(Redis.OM.Searching.IRedisCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{Redis.OM.Modeling.GeoLoc}}},System.Double,System.Double,System.Double,Redis.OM.GeoLocDistanceUnit)">
            <summary>
            Applies a geofilter.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to apply the geofilter to.</param>
            <param name="lon">longitude.</param>
            <param name="lat">latitude.</param>
            <param name="radius">radius.</param>
            <param name="unit">distance unit.</param>
            <typeparam name="T">IndexedType.</typeparam>
            <returns>A RedisCollection with the geofilter applied.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.OrderBy``2(Redis.OM.Searching.IRedisCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Orders the collection by the provided attribute.
            </summary>
            <param name="source">The Redis Collection.</param>
            <param name="expression">The expression.</param>
            <typeparam name="T">The base type.</typeparam>
            <typeparam name="TField">The field type to order by.</typeparam>
            <returns>A redis collection extending the pipeline of linq expressions with the relevant SORTBY.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.OrderByDescending``2(Redis.OM.Searching.IRedisCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Orders the collection by the provided attribute.
            </summary>
            <param name="source">The Redis Collection.</param>
            <param name="expression">The expression.</param>
            <typeparam name="T">The base type.</typeparam>
            <typeparam name="TField">The field type to order by.</typeparam>
            <returns>A redis collection extending the pipeline of linq expressions with the relevant SORTBY.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.RandomSample``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}},System.Int64)">
            <summary>
            Get a Random sample from redis.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression.</param>
            <param name="sampleSize">The sample size.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TResult">The result to get the sample for.</typeparam>
            <returns>A grouped aggregation set with the expression in it's pipeline..</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Quantile``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}},System.Double)">
            <summary>
            Retrieve the record at the given quantile. e.g. quantile .5 is median.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression to get the quantile for.</param>
            <param name="quantile">The quantile.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TResult">The field type.</typeparam>
            <returns>The item at the given quantile.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.QuantileAsync``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}},System.Double)">
            <summary>
            Retrieve the record at the given quantile. e.g. quantile .5 is median.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression to get the quantile for.</param>
            <param name="quantile">The quantile.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TResult">The field type.</typeparam>
            <returns>The item at the given quantile.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Quantile``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}},System.Double)">
            <summary>
            Retrieve the record at the given quantile. e.g. quantile .5 is median.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression to get the quantile for.</param>
            <param name="quantile">The quantile.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <returns>The item at the given quantile.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.CountDistinctish``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Retrieves an approximate distinct count of the provided field.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TField">The type the field is being taken from.</typeparam>
            <returns>An approximate count.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.CountDistinctishAsync``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Retrieves an approximate distinct count of the provided field.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TField">The type the field is being taken from.</typeparam>
            <returns>An approximate count.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Load``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Loads the provided property or properties regardless of whether or not they are set up as Aggregatable in Redis.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression to use for the load.</param>
            <typeparam name="T">The base type.</typeparam>
            <typeparam name="TLoadType">The Type to instruct redis to load.</typeparam>
            <returns>A RedisAggregationSet.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.LoadAll``1(Redis.OM.Aggregation.RedisAggregationSet{``0})">
            <summary>
            Loads all indexed attributes in a document into the Aggregation pipeline.
            </summary>
            <param name="source">The source set.</param>
            <typeparam name="T">The base type.</typeparam>
            <returns>A RedisAggregationSet.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Load``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Loads the provided property or properties regardless of whether or not they are set up as Aggregatable in Redis.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression to use for the load.</param>
            <typeparam name="T">The base type.</typeparam>
            <typeparam name="TLoadType">The Type to instruct redis to load.</typeparam>
            <returns>A GroupedAggregationSet.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.LoadAll``1(Redis.OM.Aggregation.GroupedAggregationSet{``0})">
            <summary>
            Loads all indexed attributes in a document into the Aggregation pipeline.
            </summary>
            <param name="source">The source set.</param>
            <typeparam name="T">The base type.</typeparam>
            <returns>A RedisAggregationSet.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.GroupBy``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Group like records together by provided fields.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TGroupType">The group type.</typeparam>
            <returns>A GroupedAggregationSet.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.GroupBy``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Group like records together by provided fields.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TGroupType">The group type.</typeparam>
            <returns>A GroupedAggregationSet.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Average``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Reduce the average of the provided field.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TField">The field type to average.</typeparam>
            <returns>GroupedAggregationSet with the reducer in the pipeline.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Sum``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Reduce the Sum of the provided field.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TField">The field type to reduce.</typeparam>
            <returns>GroupedAggregationSet with the reducer in the pipeline.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Min``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Reduce the Min of the provided field.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TField">The field type to reduce.</typeparam>
            <returns>GroupedAggregationSet with the reducer in the pipeline.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Max``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Reduce the Max of the provided field.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TField">The field type to reduce.</typeparam>
            <returns>GroupedAggregationSet with the reducer in the pipeline.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.StandardDeviation``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Reduce the Standard Deviation of the provided field.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The field expression.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <typeparam name="TField">The field type to reduce.</typeparam>
            <returns>GroupedAggregationSet with the reducer in the pipeline.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.OrderBy``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Order the results by the provided field.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The expression to order by.</param>
            <typeparam name="T">The Indexed type.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <returns>A set with the expression applied.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.OrderByDescending``2(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Order the results by the provided field.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The expression to order by.</param>
            <typeparam name="T">The Indexed type.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <returns>A set with the expression applied.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.OrderBy``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Order the results by the provided field.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The expression to order by.</param>
            <typeparam name="T">The Indexed type.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <returns>A set with the expression applied.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.OrderByDescending``2(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},``1}})">
            <summary>
            Order the results by the provided field.
            </summary>
            <param name="source">The source.</param>
            <param name="expression">The expression to order by.</param>
            <typeparam name="T">The Indexed type.</typeparam>
            <typeparam name="TField">The field type.</typeparam>
            <returns>A set with the expression applied.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.CloseGroup``1(Redis.OM.Aggregation.GroupedAggregationSet{``0})">
            <summary>
            Closes out the group and yields a regular RedisAggregationSet. Use this to flush reductions further
            down the pipeline.
            </summary>
            <param name="source">The source.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>A RedisAggregationSet with the current pipeline preserved.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.FirstOrDefault``1(Redis.OM.Aggregation.RedisAggregationSet{``0})">
            <summary>
            Get's the first element from Redis.
            </summary>
            <param name="source">the source.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>A single result.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.FirstOrDefaultAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0})">
            <summary>
            Get's the first element from Redis.
            </summary>
            <param name="source">the source.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>A single result.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.FirstAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0})">
            <summary>
            Get's the first element from Redis.
            </summary>
            <param name="source">the source.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>A single result.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.First``1(Redis.OM.Aggregation.RedisAggregationSet{``0})">
            <summary>
            Get's the first element from Redis.
            </summary>
            <param name="source">the source.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>A single result.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Skip``1(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Int32)">
            <summary>
            Skip a certain number of elements in Redis before reading results back.
            </summary>
            <param name="source">the source.</param>
            <param name="count">The number to skip.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The results.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Take``1(Redis.OM.Aggregation.GroupedAggregationSet{``0},System.Int32)">
            <summary>
            Take only a certain number of elements from Redis.
            </summary>
            <param name="source">the source.</param>
            <param name="count">The number to skip.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The results.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Skip``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Int32)">
            <summary>
            Skip a certain number of elements in Redis before reading results back.
            </summary>
            <param name="source">the source.</param>
            <param name="count">The number to skip.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The results.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.Take``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Int32)">
            <summary>
            Take only a certain number of elements from Redis.
            </summary>
            <param name="source">the source.</param>
            <param name="count">The number to skip.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The results.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.SumAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Double}})">
            <summary>
            Runs sum reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to sum.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The sum.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.SumAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Int32}})">
            <summary>
            Runs sum reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to sum.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The sum.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.SumAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Int64}})">
            <summary>
            Runs sum reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to sum.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The sum.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.SumAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Single}})">
            <summary>
            Runs sum reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to sum.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The sum.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.SumAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Decimal}})">
            <summary>
            Runs sum reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to sum.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The sum.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.SumAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Nullable{System.Double}}})">
            <summary>
            Runs sum reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to sum.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The sum.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.SumAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Nullable{System.Int32}}})">
            <summary>
            Runs sum reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to sum.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The sum.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.SumAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Nullable{System.Int64}}})">
            <summary>
            Runs sum reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to sum.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The sum.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.SumAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Nullable{System.Single}}})">
            <summary>
            Runs sum reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to sum.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The sum.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.SumAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Nullable{System.Decimal}}})">
            <summary>
            Runs sum reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to sum.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The sum.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.AverageAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Double}})">
            <summary>
            Runs average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to average.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The average.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.AverageAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Int32}})">
            <summary>
            Runs average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to average.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The average.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.AverageAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Int64}})">
            <summary>
            Runs average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to average.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The average.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.AverageAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Single}})">
            <summary>
            Runs average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to average.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The average.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.AverageAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Decimal}})">
            <summary>
            Runs average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to average.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The average.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.AverageAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Nullable{System.Double}}})">
            <summary>
            Runs average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to average.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The average.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.AverageAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Nullable{System.Int32}}})">
            <summary>
            Runs average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to average.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The average.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.AverageAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Nullable{System.Int64}}})">
            <summary>
            Runs average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to average.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The average.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.AverageAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Nullable{System.Single}}})">
            <summary>
            Runs average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to average.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The average.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.AverageAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},System.Nullable{System.Decimal}}})">
            <summary>
            Runs average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to average.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The average.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.MaxAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},Redis.OM.RedisReply}})">
            <summary>
            Max average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to max.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The max.</returns>
        </member>
        <member name="M:Redis.OM.SearchExtensions.MinAsync``1(Redis.OM.Aggregation.RedisAggregationSet{``0},System.Linq.Expressions.Expression{System.Func{Redis.OM.Aggregation.AggregationResult{``0},Redis.OM.RedisReply}})">
            <summary>
            Min average reduction.
            </summary>
            <param name="source">the source.</param>
            <param name="expression">The field expression to min.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The min.</returns>
        </member>
        <member name="T:Redis.OM.Searching.IRedisCollection`1">
            <summary>
            A collection of items in redis that you can use to look up items in redis, or perform queries on indexed documents.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="P:Redis.OM.Searching.IRedisCollection`1.SaveState">
            <summary>
            Gets a value indicating whether gets whether the collection is meant to save the state of the records enumerated into it.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.IRedisCollection`1.StateManager">
            <summary>
            Gets the collection state manager.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.IRedisCollection`1.ChunkSize">
            <summary>
            Gets the size of chunks to use when paginating.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.Save">
            <summary>
            Saves the current state of the collection, overriding what was initially materialized.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.SaveAsync">
            <summary>
            Saves the current state of the collection, overriding what was initially materialized.
            </summary>
            <returns>a value task.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.Insert(`0)">
            <summary>
            Inserts an item into redis.
            </summary>
            <param name="item">an item.</param>
            <returns>the key.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.Insert(`0,System.TimeSpan)">
            <summary>
            Inserts an item into redis.
            </summary>
            <param name="item">an item.</param>
            <param name="timeSpan">The timespan of the document's (TTL).</param>
            <returns>the key.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.InsertAsync(`0)">
            <summary>
            Inserts an item into redis.
            </summary>
            <param name="item">an item.</param>
            <returns>the key.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.InsertAsync(`0,System.TimeSpan)">
            <summary>
            Inserts an item into redis.
            </summary>
            <param name="item">an item.</param>
            <param name="timeSpan">The timespan of the document's (TTL).</param>
            <returns>the key.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.InsertAsync(`0,Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <summary>
            Inserts an item into redis.
            </summary>
            <param name="item">The item.</param>
            <param name="when">Condition to insert the document under.</param>
            <param name="timeSpan">The expiration time of the document (TTL).</param>
            <returns>the Id of the newly inserted item, or null if not inserted.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.Insert(`0,Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <summary>
            Inserts an item into redis.
            </summary>
            <param name="item">The item.</param>
            <param name="when">Condition to insert the document under.</param>
            <param name="timeSpan">The expiration time of the document (TTL).</param>
            <returns>the Id of the newly inserted item, or null if not inserted.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts list of items into redis.
            </summary>
            <param name="items">The items to insert.</param>
            <returns>The list of Keys.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.TimeSpan)">
            <summary>
            Inserts list of items into redis.
            </summary>
            <param name="items">The items to insert.</param>
            <param name="timeSpan">The timespan of the document's (TTL).</param>
            /// <returns>The list of Keys.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.InsertAsync(System.Collections.Generic.IEnumerable{`0},Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <summary>
            Inserts list of items into redis.
            </summary>
            <param name="items">The item.</param>
            <param name="when">Condition to insert the document under.</param>
            <param name="timeSpan">The expiration time of the document (TTL).</param>
            <returns>the Id of the newly inserted item, or null if not inserted.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.FindByIdAsync(System.String)">
            <summary>
            finds an item by it's ID or keyname.
            </summary>
            <param name="id">the id to lookup.</param>
            <returns>the item if it's present.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.FindById(System.String)">
            <summary>
            finds an item by it's ID or keyname.
            </summary>
            <param name="id">the id to lookup.</param>
            <returns>the item if it's present.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.Any">
            <summary>
            Checks to see if the collection contains any.
            </summary>
            <returns>Whether anything matching the expression was found.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Checks to see if anything matching the expression exists.
            </summary>
            <param name="expression">the expression to be matched.</param>
            <returns>Whether anything matching the expression was found.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.Update(`0)">
            <summary>
            Updates the provided item in Redis. Document must have a property marked with the <see cref="T:Redis.OM.Modeling.RedisIdFieldAttribute"/>.
            </summary>
            <param name="item">The item to update.</param>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.UpdateAsync(`0)">
            <summary>
            Updates the provided item in Redis. Document must have a property marked with the <see cref="T:Redis.OM.Modeling.RedisIdFieldAttribute"/>.
            </summary>
            <param name="item">The item to update.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates the provided items in Redis. Document must have a property marked with the <see cref="T:Redis.OM.Modeling.RedisIdFieldAttribute"/>.
            </summary>
            <param name="items">The items to update.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.Delete(`0)">
            <summary>
            Deletes the item from Redis.
            </summary>
            <param name="item">The item to be deleted.</param>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Deletes the List of items from Redis.
            </summary>
            <param name="items">The items to be deleted.</param>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.DeleteAsync(`0)">
            <summary>
            Deletes the item from Redis.
            </summary>
            <param name="item">The item to be deleted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Deletes the List of items from Redis.
            </summary>
            <param name="items">The items to be deleted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.ToListAsync">
            <summary>
            Async method for enumerating the collection to a list.
            </summary>
            <returns>The enumerated collection as a list.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.CountAsync">
            <summary>
            Retrieves the count of the collection async.
            </summary>
            <returns>The Collection's count.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retrieves the count of the collection async.
            </summary>
            <param name="expression">The predicate match.</param>
            <returns>The Collection's count.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.AnyAsync">
            <summary>
            returns if there's any items in the colleciton.
            </summary>
            <returns>True if there are items present.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            returns if there's any items in the colleciton.
            </summary>
            <returns>True if there are items present.</returns>
            <param name="expression">The predicate match.</param>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.FirstAsync">
            <summary>
            Returns the first item asynchronously.
            </summary>
            <returns>First or default result.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first item asynchronously.
            </summary>
            <param name="expression">The predicate match.</param>
            <returns>First or default result.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.FirstOrDefaultAsync">
            <summary>
            Returns the first or default asynchronously.
            </summary>
            <returns>First or default result.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first or default asynchronously.
            </summary>
            <param name="expression">The predicate match.</param>
            <returns>First or default result.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.SingleAsync">
            <summary>
            Returns a single record or throws a <see cref="T:System.InvalidOperationException"/> if the sequence is empty or contains more than 1 record.
            </summary>
            <returns>The single instance.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns a single record or throws a <see cref="T:System.InvalidOperationException"/> if the sequence is empty or contains more than 1 record.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The single instance.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.SingleOrDefaultAsync">
            <summary>
            Returns a single record or the default if there are none, or more than 1.
            </summary>
            <returns>The single instance.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns a single record or the default if there are none, or more than 1.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The single instance.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retrieves the count of the collection async.
            </summary>
            <param name="expression">The predicate match.</param>
            <returns>The Collection's count.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first item asynchronously.
            </summary>
            <param name="expression">The predicate match.</param>
            <returns>First or default result.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first or default asynchronously.
            </summary>
            <param name="expression">The predicate match.</param>
            <returns>First or default result.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns a single record or throws a <see cref="T:System.InvalidOperationException"/> if the sequence is empty or contains more than 1 record.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The single instance.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.SingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns a single record or the default if there are none, or more than 1.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The single instance.</returns>
        </member>
        <member name="M:Redis.OM.Searching.IRedisCollection`1.FindByIdsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves the objects from redis at the given IDs,
            if there is no such Object in Redis, null is returned in the KVP.
            </summary>
            <param name="ids">The Ids to look up.</param>
            <returns>A dictionary correlating the ids provided to the objects in Redis.</returns>
        </member>
        <member name="T:Redis.OM.Searching.Query.QueryFlags">
            <summary>
            Flags to indicate the options of a query.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.QueryFlags.Nocontent">
            <summary>
            If it appears after the query, we only return the document ids and not the content.
            This is useful if RediSearch is only an index on an external document collection.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.QueryFlags.Verbatim">
            <summary>
            if set, we do not try to use stemming for query expansion but search the query terms verbatim.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.QueryFlags.NoStopWords">
            <summary>
            If set, we do not filter stop words from the query.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.QueryFlags.WithScores">
            <summary>
            If set, we also return the relative internal score of each document. T
            his can be used to merge results from multiple instances.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.QueryFlags.WithPayloads">
            <summary>
            If set, we retrieve optional document payloads (see FT.ADD). the payloads follow the document id,
            and if WITHSCORES was set, follow the scores.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.QueryFlags.WithSortKeys">
            <summary>
            Only relevant in conjunction with SORTBY . Returns the value of the sorting key, right after the id and
            score and /or payload if requested. This is usually not needed by users,
            and exists for distributed search coordination purposes.
            </summary>
        </member>
        <member name="T:Redis.OM.Searching.Query.QueryOption">
            <summary>
            An option within a query.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.QueryOption.SerializeArgs">
            <summary>
            Gets a serialized array of strings for a query.
            </summary>
        </member>
        <member name="T:Redis.OM.Searching.Query.RedisFilter">
            <summary>
            Filter to use when querying.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.RedisFilter._fieldName">
            <summary>
            Gets or sets field filter on.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.RedisFilter._min">
            <summary>
            Gets or sets the min.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.RedisFilter._max">
            <summary>
            Gets or sets the max.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.Query.RedisFilter.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.Query.RedisFilter"/> class.
            </summary>
            <param name="fieldName">the field name.</param>
            <param name="min">the min value.</param>
            <param name="max">the max value.</param>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisFilter.SerializeArgs">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Searching.Query.RedisGeoFilter">
            <summary>
            A geographic filter.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.Query.RedisGeoFilter.#ctor(System.String,System.Double,System.Double,System.Double,Redis.OM.GeoLocDistanceUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.Query.RedisGeoFilter"/> class.
            </summary>
            <param name="field">the field to filter.</param>
            <param name="longitude">the longitude.</param>
            <param name="latitude">the latitude.</param>
            <param name="radius">radius.</param>
            <param name="unit">the unit.</param>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisGeoFilter.SerializeArgs">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Searching.Query.RedisQuery">
            <summary>
            A query to redis.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.Query.RedisQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.Query.RedisQuery"/> class.
            An object to facilitate the Raw Redis query.
            </summary>
            <param name="index">Name of the Index to query.</param>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisQuery.Flags">
            <summary>
            Gets or sets the flags for the query options.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisQuery.Index">
            <summary>
            Gets or sets the index to query.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisQuery.QueryText">
            <summary>
            Gets or sets the query text.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisQuery.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisQuery.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisQuery.GeoFilter">
            <summary>
            gets or sets the geofilter.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisQuery.Return">
            <summary>
            gets or sets the items to return.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisQuery.SortBy">
            <summary>
            gets or sets the items to sort by.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.Query.RedisQuery.SerializeQuery">
            <summary>
            Serializes the query into a set of arguments.
            </summary>
            <returns>the serialized arguments.</returns>
            <exception cref="T:System.ArgumentException">thrown if the index is null.</exception>
        </member>
        <member name="T:Redis.OM.Searching.Query.RedisSortBy">
            <summary>
            a sort-by predicate for a search.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisSortBy.Field">
            <summary>
            gets or sets the field to sort by.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisSortBy.Direction">
            <summary>
            Gets or sets the direction to sort by.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.RedisSortBy.SerializeArgs">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Searching.Query.ReturnField">
            <summary>
            Represents a return field with a name and an optional alias.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.ReturnField.Name">
            <summary>
            The name of the return field.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.ReturnField.Alias">
            <summary>
            An optional alias for the return field.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.Query.ReturnField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.Query.ReturnField"/> struct with the specified name and alias.
            </summary>
            <param name="name">The name of the return field.</param>
            <param name="alias">An optional alias for the return field.</param>
        </member>
        <member name="M:Redis.OM.Searching.Query.ReturnField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.Query.ReturnField"/> struct with the specified name.
            </summary>
            <param name="name">The name of the return field.</param>
        </member>
        <member name="T:Redis.OM.Searching.Query.ReturnFields">
            <summary>
            Predicate denoting the fields that will be returned from redis.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.Query.ReturnFields._fields">
            <summary>
            The fields to bring back.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.Query.ReturnFields.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.Query.ReturnFields"/> class.
            </summary>
            <param name="fields">the fields to return.</param>
        </member>
        <member name="M:Redis.OM.Searching.Query.ReturnFields.#ctor(System.Collections.Generic.IEnumerable{Redis.OM.Searching.Query.ReturnField})">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.Query.ReturnFields"/> class.
            </summary>
            <param name="fields">the fields to return.</param>
        </member>
        <member name="P:Redis.OM.Searching.Query.ReturnFields.SerializeArgs">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Searching.Query.SearchLimit">
            <summary>
            Limits the search results.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.SearchLimit.Offset">
            <summary>
            Gets or sets the offset into the result to start at.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.SearchLimit.Number">
            <summary>
            Gets or sets the number of items to return.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.Query.SearchLimit.SerializeArgs">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Searching.RedisCollection`1">
            <summary>
            Collection of items in Redis, can be queried using it's fluent interface.
            </summary>
            <typeparam name="T">The type being stored in Redis.</typeparam>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.#ctor(Redis.OM.Contracts.IRedisConnection,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.RedisCollection`1"/> class.
            </summary>
            <param name="connection">Connection to Redis.</param>
            <param name="chunkSize">Size of chunks to pull back during pagination, defaults to 100.</param>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.#ctor(Redis.OM.Contracts.IRedisConnection,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.RedisCollection`1"/> class.
            </summary>
            <param name="saveState">Determines whether or not the Redis Colleciton will maintain it's state internally.</param>
            <param name="connection">Connection to Redis.</param>
            <param name="chunkSize">Size of chunks to pull back during pagination, defaults to 100.</param>
            <exception cref="T:System.ArgumentException">Thrown if the root attribute of the Redis Colleciton is not decorated with a DocumentAttribute.</exception>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.#ctor(Redis.OM.Searching.RedisQueryProvider,System.Linq.Expressions.Expression,Redis.OM.Modeling.RedisCollectionStateManager,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.RedisCollection`1"/> class.
            </summary>
            <param name="provider">Query Provider.</param>
            <param name="expression">Expression to be parsed for the query.</param>
            <param name="stateManager">Manager of the internal state of the collection.</param>
            <param name="saveState">Whether or not the StateManager will maintain the state.</param>
            <param name="chunkSize">Size of chunks to pull back during pagination, defaults to 100.</param>
            <param name="booleanExpression">The expression to build the filter from.</param>
        </member>
        <member name="P:Redis.OM.Searching.RedisCollection`1.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Redis.OM.Searching.RedisCollection`1.Expression">
            <inheritdoc/>
        </member>
        <member name="P:Redis.OM.Searching.RedisCollection`1.Provider">
            <inheritdoc/>
        </member>
        <member name="P:Redis.OM.Searching.RedisCollection`1.SaveState">
            <inheritdoc />
        </member>
        <member name="P:Redis.OM.Searching.RedisCollection`1.StateManager">
            <summary>
            Gets manages the state of the items queried from Redis.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.RedisCollection`1.ChunkSize">
            <inheritdoc />
        </member>
        <member name="P:Redis.OM.Searching.RedisCollection`1.RootType">
            <summary>
            Gets or sets the root type for the collection.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.RedisCollection`1.BooleanExpression">
            <summary>
            Gets or sets the main boolean expression to be used for building the filter for this collection.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.Any">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Checks to see if anything matching the expression exists.
            </summary>
            <param name="expression">the expression to be matched.</param>
            <returns>Whether anything matching the expression was found.</returns>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.Update(`0)">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.UpdateAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.Delete(`0)">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.DeleteAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.ToListAsync">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.CountAsync">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.AnyAsync">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.FirstAsync">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.FirstOrDefaultAsync">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.SingleAsync">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.SingleOrDefaultAsync">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.SingleOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.FindByIdsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.Save">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.SaveAsync">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.Insert(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.Insert(`0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.InsertAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.InsertAsync(`0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.InsertAsync(`0,Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.Insert(`0,Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.InsertAsync(System.Collections.Generic.IEnumerable{`0},Redis.OM.WhenKey,System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.FindById(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.FindByIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollection`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Searching.RedisCollectionEnumerator`1">
            <summary>
            Enumerator for collection.
            </summary>
            <typeparam name="T">the indexed type.</typeparam>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollectionEnumerator`1.#ctor(System.Linq.Expressions.Expression,Redis.OM.Contracts.IRedisConnection,System.Int32,Redis.OM.Modeling.RedisCollectionStateManager,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.RedisCollectionEnumerator`1"/> class.
            </summary>
            <param name="exp">expression to materialize.</param>
            <param name="connection">the connection to redis.</param>
            <param name="chunkSize">the size of a chunk to pull back.</param>
            <param name="stateManager">the state manager.</param>
            <param name="booleanExpression">The main boolean expression to use to build the filter.</param>
            <param name="saveState">Determins whether the records from the RedisCollection are stored in the StateManager.</param>
            <param name="rootType">The root type for the enumerator.</param>
            <param name="type">The type the enumerator is responsible for enumerating.</param>
        </member>
        <member name="P:Redis.OM.Searching.RedisCollectionEnumerator`1.Current">
            <summary>
            Gets current record.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.RedisCollectionEnumerator`1.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollectionEnumerator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollectionEnumerator`1.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollectionEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollectionEnumerator`1.MoveNextAsync">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisCollectionEnumerator`1.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Searching.RedisQueryProvider">
            <summary>
            Query provider.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.#ctor(Redis.OM.Contracts.IRedisConnection,Redis.OM.Modeling.RedisCollectionStateManager,Redis.OM.Modeling.DocumentAttribute,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.RedisQueryProvider"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="stateManager">The state manager.</param>
            <param name="documentAttribute">the document attribute for the indexed type.</param>
            <param name="chunkSize">The size of chunks to use in pagination.</param>
            <param name="saveState">Whether or not to save state.</param>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.#ctor(Redis.OM.Contracts.IRedisConnection,Redis.OM.Modeling.DocumentAttribute,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.RedisQueryProvider"/> class.
            </summary>
            <param name="connection">the connection.</param>
            <param name="documentAttribute">The document attribute for the indexed type.</param>
            <param name="chunkSize">The size of chunks to use in pagination.</param>
            <param name="saveState">Whether or not to Save State.</param>
        </member>
        <member name="P:Redis.OM.Searching.RedisQueryProvider.Connection">
            <summary>
            Gets the connection to redis.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.RedisQueryProvider.StateManager">
            <summary>
            Gets or sets the state manager.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.RedisQueryProvider.DocumentAttribute">
            <summary>
            Gets the document attribute.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.RedisQueryProvider.BooleanExpression">
            <summary>
            Gets or sets the main boolean expression to be used for building the filter for this collection.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.ExecuteQuery``1(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Executes the query.
            </summary>
            <param name="expression">The expression to be built and executed.</param>
            <param name="mainBooleanExpression">The main boolean expression to build the filter off of.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The response.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if indexed type not properly decorated.</exception>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.ExecuteQueryAsync``1(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Executes the query.
            </summary>
            <param name="expression">The expression to be built and executed.</param>
            /// <param name="mainBooleanExpression">The main boolean expression to build the filter off of.</param>
            <typeparam name="T">The indexed type.</typeparam>
            <returns>The response.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if indexed type not properly decorated.</exception>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.ExecuteAggregation``1(System.Linq.Expressions.MethodCallExpression,System.Type)">
            <summary>
            Executes an aggregation.
            </summary>
            <param name="expression">The expression to be built into a pipeline.</param>
            <param name="underpinningType">The indexed type underpinning the expression.</param>
            <typeparam name="T">The type to return.</typeparam>
            <returns>The result of the aggregation.</returns>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.ExecuteAggregationAsync``1(System.Linq.Expressions.MethodCallExpression,System.Type)">
            <summary>
            Executes an aggregation.
            </summary>
            <param name="expression">The expression to be built into a pipeline.</param>
            <param name="underpinningType">The indexed type underpinning the expression.</param>
            <typeparam name="T">The type to return.</typeparam>
            <returns>The result of the aggregation.</returns>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.ExecuteReductiveAggregation(System.Linq.Expressions.MethodCallExpression,System.Type)">
            <summary>
            Executes an aggregation.
            </summary>
            <param name="expression">The expression to be built into a pipeline.</param>
            <param name="underpinningType">The indexed type underpinning the expression.</param>
            <returns>The result of the aggregation.</returns>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.ExecuteReductiveAggregationAsync``1(System.Linq.Expressions.MethodCallExpression,System.Type)">
            <summary>
            Executes an aggregation.
            </summary>
            <param name="expression">The expression to be built into a pipeline.</param>
            <param name="underpinningType">The indexed type underpinning the expression.</param>
            <typeparam name="T">The type of the result.</typeparam>
            <returns>The result of the aggregation.</returns>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.GetRootType(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Gets the root type for the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The root type.</returns>
        </member>
        <member name="M:Redis.OM.Searching.RedisQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.Searching.SearchResponse">
            <summary>
            The result from a search.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.SearchResponse.#ctor(Redis.OM.RedisReply)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.SearchResponse"/> class.
            </summary>
            <param name="val">The redis response.</param>
        </member>
        <member name="P:Redis.OM.Searching.SearchResponse.DocumentCount">
            <summary>
            Gets the number of documents found by the search.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.SearchResponse.Documents">
            <summary>
            Gets the documents from the search.
            </summary>
        </member>
        <member name="M:Redis.OM.Searching.SearchResponse.DocumentsAs``1">
            <summary>
            gets document as a collection of the provided type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>A dictionary of the response type with their keys.</returns>
        </member>
        <member name="T:Redis.OM.Searching.SearchResponse`1">
            <summary>
            A strongly typed search response.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:Redis.OM.Searching.SearchResponse`1.#ctor(Redis.OM.RedisReply)">
            <summary>
            Initializes a new instance of the <see cref="T:Redis.OM.Searching.SearchResponse`1"/> class.
            </summary>
            <param name="val">The response to use to initialize the Search Response.</param>
        </member>
        <member name="P:Redis.OM.Searching.SearchResponse`1.DocumentCount">
            <summary>
            Gets or sets the number of documents found by the search.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.SearchResponse`1.Documents">
            <summary>
            Gets the documents.
            </summary>
        </member>
        <member name="P:Redis.OM.Searching.SearchResponse`1.Item(System.String)">
            <summary>
            Gets a particular document by it's ID.
            </summary>
            <param name="key">the key to use to look up.</param>
        </member>
        <member name="P:Redis.OM.Searching.SearchResponse`1.Item(System.Int32)">
            <summary>
            Gets a particular element by its index in the collection.
            </summary>
            <param name="index">the index.</param>
        </member>
        <member name="T:Redis.OM.Searching.SortDirection">
            <summary>
            The direction to sort.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.SortDirection.Ascending">
            <summary>
            Ascending.
            </summary>
        </member>
        <member name="F:Redis.OM.Searching.SortDirection.Descending">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:Redis.OM.UlidGenerationStrategy">
            <summary>
            generation strategy that generates a <see href="https://github.com/ulid/spec">ULID</see>.
            </summary>
        </member>
        <member name="M:Redis.OM.UlidGenerationStrategy.GenerateId">
            <summary>
            Generates a <see href="https://github.com/ulid/spec">ULID</see>.
            </summary>
            <returns>A Ulid.</returns>
        </member>
        <member name="T:Redis.OM.Uuid4IdGenerationStrategy">
            <summary>
            Generation strategy to creat UUID4 Ids.
            </summary>
        </member>
        <member name="M:Redis.OM.Uuid4IdGenerationStrategy.GenerateId">
            <inheritdoc/>
        </member>
        <member name="T:Redis.OM.WhenKey">
            <summary>
            Indicates when this operation should be performed (only some variations are legal in a given context).
            </summary>
        </member>
        <member name="F:Redis.OM.WhenKey.Always">
            <summary>
            The operation should occur whether or not there is an existing value.
            </summary>
        </member>
        <member name="F:Redis.OM.WhenKey.Exists">
            <summary>
            The operation should only occur when there is an existing value.
            </summary>
        </member>
        <member name="F:Redis.OM.WhenKey.NotExists">
            <summary>
            The operation should only occur when there is not an existing value.
            </summary>
        </member>
    </members>
</doc>
